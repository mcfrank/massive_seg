%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: boundary_freqs_col.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Michael Frank
%%CreationDate: 11/30/12
%%BoundingBox: 0 0 331 201
%%HiResBoundingBox: 0 0 330.3730 200.2700
%%CropBox: 0 0 330.3730 200.2700
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 5940 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FFA87DFF7DA8FD7CFF52A8277DA87DA8FD79FFA8A87DA8FF7D%FD7FFF7DA8FD7EFF7DFD67FFA8FD17FFA8A8FD60FFA8277D7DA85252FD06%7D52FD047DFD0CFF7DFD61FFA85227527D7D27522727277D5252F8275252%FD0CFF7DA8FD61FFA8A87DFFFD04A87DA8A8A87DA8A8A87DFD0CFF7DFD7F%FF7DA8FD6FFF52FD0EFF7DFD6BFFA8A87D7D7D52A8FD04FFA8FD08FF7DA8%FD67FF7D7D527D7DA8A8FF7DA8FFFFFF52A8FD08FF7DFD61FF7DFFFFA87D%7D7DA8A8FD0AFFA82752FFFFA852FF52A8FF7DA8FD5FFF7D527D7D7DA8A8%FD09FFA8FD04FF527DFFFF7D527D277DFF52FD5DFFA87D7D7D52FD12FFA8%527DFFFFA87DA87DA8FF7DA8FD50FFA8A8FD05FFA8A87D7D7DA8A8FFA8A8%FD0CFFA8FFA8FFFFFFA8277DFD08FF7DFD51FF7D7DA8A87D7D7DA8A8FD13%FFA8FD06FFA82752FD08FF7DA8FD13FFA8FD2DFF7DFD09FFA8A87D7D7D52%52A87DFFA8FD13FFA8FFA8FFFFFFA8FFFFFFA8277DFD08FF7DFD05FFA8FD%0EFFA8A8FD2CFF7DA8FFA8A87D7D7DA87DA87DA8A8FF7DFD17FFA8FD0AFF%A8527DFD08FF7DA8FFFFFFA87DFD0EFF52FD0FFFA8FD0DFFA8FFA8FFFD06%A8FD067D27FD047DA8A8FFA8FD06FFA8A8FD13FFA8FFA8FD0CFF27A8FD08%FF7DFD04FFA852FD0DFFA852A8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07A8%7DA87DA87DA87DA852A87DA87DA87DFD04A8FFA8FFFFA8FD1EFFA8FFFFFF%A8FD0EFFA8F852FD08FFA8A8FFFFFFA8527DA87D7D7DA87D7D7DA8FD047D%52FD0E7D5252A87DFD04A8FFA8A8A8FFA8FFA87DFD0EFFA8FD1FFFA8FFA8%FFA8A8A8FFA8FFA8FFFD05A8FF7D7D7DFD08FF7DFD05FF7DFD1DFF7DA8FD%0DFFA852FD2DFFA8FD05FFFD05A8FFFD06A8FF527D52FD08FF7DA8FFFFFF%A8FD1EFFA8A8FD0DFFA87DFD2AFFA8FFA8FD07FFA8FFA8FFA8FFA8FFA8FF%A8FFFFA8FD09FF7DFD23FFA8FD0FFF7DFD29FFA8FD16FF7D527DFFFFFFA8%FFA8FFFFA8A8FD5BFFA8FFFFFFA8FD13FFA8277DFFFF7D7DA8527DFF52FD%05FFA8FD53FFA8FD1AFFA82752FFFF7D277D277DA87DA8FFFFFFA8FD4DFF%A8FFFFFFA8FFA8FD1CFFF87DFFFFFD05A8FF7DFD05FFA8FD4BFFA8FFFFFF%A8FD1EFFA8527DFD08FFA8A8FD31FFA8FD1FFFA8FFA8FD20FF52A8FD08FF%7DFD05FFA8FD2DFFA8FD1DFFA8FD22FFA8527DFD08FF7DA8FFFFFFA8FD3D%FFA8FD09FFA8FFA8FFA8FFA8FD22FF527DFD08FF7DFD33FFA8FD17FFA8FD%28FF7D7D52FD08FF7DA8FFFFFFA8FD0FFFA8FD1DFFA8A8FD0EFFA8FFFFFF%A8FFA8FFA8FD07FFA8FD21FF7D7D7DFD08FF7DFD05FFA8FD2DFFA8FD0EFF%A8A8FFA8FD0BFFA8FD22FFA87DA8FD08FF7DA8FFFFFFA8FD0FFFA8FD0FFF%A8FD0DFFA8FD0BFFA8FFA8FFA8FD0FFFA8FD21FFA87DFD09FF7DFD05FFA8%FD33FFA8FFA8FFA8FD36FF7DF852FD08FFA8A8FD13FFA8FD19FFA8FFFFFF%A8A8A8FFA8FFA8FFA8FD07FFA8FD32FF527DFFFFFFA8FFFFA8FF7DFD23FF%A8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FD40FFA8A8FFFFFF7D52A8277D%A852A8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8A8A8FFA8FFA8FFFFFFA8FD48FF527DA8FF7D527D527DFF%7DFD05FFA8FFA8FFFFFFA8FD17FFA8FD50FFA85252A8FFFFA8FD04FF7DA8%FFFFFFA8FD0FFFA8FD0EFFA8A8FD4FFF7DF852FD08FF7DFD05FFA8FD6EFF%7D5252FD08FF7DA8FD13FFA8FD0FFFA8FD4FFFA8277DFD08FF7DFD05FFA8%FD6EFF7D5252FD08FFA8A8FD13FFA8FD0FFFA8FD50FF527DFD08FF7DFD05%FFA8FD6EFFA82752FD08FF7DA8FFFFFFA8FD0FFFA8FD60FF527DFD08FF7D%FD74FF7D2752FD08FF7DA8FFFFFFA8FD70FF527DFD08FF7DFD05FFA8FD6E%FFA8277DFFFFA87DFF7DA8FF7DA8FFFFFFA8FD6FFFA87DFFFFFF7D52A87D%7DFF52FD05FFA8FD6EFF5252A8FFFFA852A852A8FF7DA8FD73FF7D52A8FD%08FF7DFD7FFF7DA8FD7EFF7DFD7FFF7DA8FD7EFF7DFD7FFF7DA8FD7EFF7D%FD7FFFA8A8FD7EFF7DFD7AFFA8FFA8FFFF7DA8FD78FF7D527D7D7DFF7DFD%79FF7D527D277DA87DA8FD78FFFD05A8FD88FFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFA8%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FD16FF52A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA8527D7DA87D7D7DA87D7D7DA8FD047D52A87DA87D7D7DA87D7D7DA8%FD077DA87D7D7DA87D7D7DA87DA852FD047DA87D7D7DA87D7D7DA87D7D52%A87D7D7DA87D7D7DA87D7D7DA87D7DFD13FFA8A8FD0EFF7DFD0EFFA8A8FD%0DFFA8A8FD0EFF7DFD0EFFA8A8FD0DFFA8A8FD0EFF7DFD12FFA8A87DA8FD%0CFF7DA87DFD0CFFA87DFFA8FD0BFFA8A87DA8A8FD0AFFA87D7DA8A8FD0A%FFA87DA8A87DFD0AFFA8A8A87DA8A8FD09FFA87D7DFFA8A87DFD0FFFA827%2752FD0CFF52527DA8FD0BFF2752F87DFD0BFF527D522752FD0AFF7D5227%2727FD0AFF7D277D527D7DFD09FF7D52527D522752FD08FFA82752522727%27FD10FFA8527DFD0CFF527D52FD0CFF7D527DA8FD0BFF7D7D527D7DFD0A%FF7D527D527DFD0AFFA87DA87D52FD0AFFA8527D7D7D52A8FD08FF7D5252%A8525252FD20FFA8FD1DFFA8FFA8FD0BFFA8FFFFFFA8FD0BFFA8FFFFFFA8%FD0BFFA8FFA8FD0BFFA8FDB6FFA8A8FD11FFA8FD0DFFA8FFA8FD5BFFA827%FD06A8FFFD04A87DFFFFFF7DA8A8527DA8A8FF7DFF7D7DA8A8A8FFA87D52%7D7DFD04A8FF7D7DFD53FF7D525227F852275227272752275227FF27277D%7D272752522727275227F852527DA82752525227525227275227A8FD55FF%7D7DA8527D7D7DA8FD047DFF7D7DA8A87D7DA87D7DA8A87D7D7DA852A8A8%7D7DA8A8A87DA87DA87D7DA8FD58FFA8FD07FFA8FD10FFA8FFFFA8FD09FF%A8FD22FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2012-11-30T09:25:34-08:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:ModifyDate>2012-11-30T09:25:34-08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2012-11-30T09:25:34-08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxzzDomtXOvaXqum3&#xA;BUWUN1DNbPM8cTGdFWOTgFdWZGFat/HFWJabofnjyp+Wusz3Oqi21Oximv4Ujc36f6PYRoymW6QM&#xA;RPcwSXB+EU9SmKvUMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVY/+Yf8AygHmb/tlX3/UM+KsgxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KsA8/Q/medespvKj10sR28d9bkxrUtexmSSMuQeaQqag/CyFv2uOK&#xA;sY8xTfnrf+ULJ4IJrPXFv5BILNbdZDD9R+EyJ9Y9Pgt8WVT6hrGEZhuRiqIl178/Y55Ej0RJYXlM&#xA;cTlbRWjP1y2+JqXBDQiyE/F/tGQiqgAYqgdc1H/nIuJbX6hZC5ubdSzmOO0jhmLmRT6ha4LVQMvF&#xA;QvHapJO2Kp/5P1z82J/NGn2XmSCG3tbu3uL6+gSJa2qQMYYoRIjSKTO0yOtW5ARt44q9J+sW/reh&#xA;6qeuByMXIc6ePHrTFVTFWP8A5h/8oB5m/wC2Vff9Qz4qyDFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYqsjmhkaRI5Fd4W4SqpBKMVD8WA6HiwND2IxV09xBbwvPcSLD&#xA;DGOUksjBVUDuWNAMVY8fzB8tStw0ySbWn6A6VBLeRV8GuIla3Q/68gxVcNZ85XRJs/LqWieOq3sc&#xA;L/MJZpfg/Iuv0Yqs/LyXWpPLsja0yNf/AKS1RX9JnZAq6jcKqqZPi4qoov8Ak0xV5/5YiV/z71i9&#xA;try2mguUkkdENlJVfq1tGhRwWvRKGRuaFVjC0IJauKsu8xP58i8+afNpsM8/l5IYjNFE0Cwk0uxd&#xA;LMHYSciTaGIr0o/vVVjMMX5mr+TfmJPMjhdTW2v/AFmvwkkj2xsgX4fVX4KRN6irUmoAYBVIUKvX&#xA;cVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqFGpWx1R9MBP1pIFuWFPh9N3ZBv&#xA;41Q4qqXd5Z2cDT3c8dtAv2pZXVEHzZiBiqRf8rB8rSmmnXMmrk9DpUE1+lfAy2ySRL/snGKt/pzz&#xA;bd7af5d+rL/v3VruKAUP7SpaC+Y/6r8PoxVIPL/lbznPrHmeXVdfnsoLrUI3ji022igSQfo+1Qsk&#xA;tyt05QcfTqnE8kJqPshVkUHkPyoky3FxYjUbpDWO51KSS/lQ+Mb3TTGP5JQYqn4AAoNgOgxVRlvL&#xA;aJuDuPUO4jWrOfkq1b8MVU9NmM1sXIYVlloHBBp6jU2PhiryHy15f1GH/nITV9UuhJJK8Dh6QypC&#xA;sPoW6xTLIxaP96/NDGJGYcASoHHiq9oxVj/5h/8AKAeZv+2Vff8AUM+KsgxVK9H1tNSvtatUCj9E&#xA;3i2ZZW5Fq2sFwSR+yQbgrT2xVNMVdirTMqqWY0UCpPsMVSTyV5hXzD5dg1VZEkE0lwgeMELSKd41&#xA;2P8AkoMVTzFXYqpXd1BaWs13cNwt7eNpZnoTxRAWY0AJNAO2Kr4ZY5okljPKORQ6NuKhhUHfFV2K&#xA;uxVC3WqaZaEi6vIICtARLIiU5Gg+0R1rtiqXz+d/JduAZ9f02EN9kyXcC1p4VfFVEfmF5EanpeYN&#xA;PnJ3pBcRTEDxIjZyBirX+PPLzbxLfzjb4rfTNRnAr4mK3cDFUh1zz3df4k8uQaZo+sXMFxNcidRb&#xA;tZq4W3fiCt41sD8W/wAVKUriqff4h8yS7QeVruJvG8ubGNevjbz3bf8AC/2Ku+sfmDNt9Q0qyH+/&#xA;DeXF2fpjFtaj/h8VaGk+d56i78w28Cdjp+niFx/srqe9X/hMVSRPy3kl85zarqWq6tfQvp0VsLj6&#xA;8bOsizOxThp31PYKQfs0Ne5xVkNp5F8nWs63MWjWjXa9LyWJZrj6Z5Q8p/4LFU8xV2KrUlV2kVes&#xA;bcW+fEN+psVUpryNHMSAzT9fSTciv8xOy/ScVWehcz73Enpof90wkj/gpNm/4GmKq8MEMK8YkVFO&#xA;5CilT4nFWoIfSQrXlV3evT7blqfRXFXi/kby7qB/OC583XdpqEd5q8dzHqVvNZTW9pa+hSO1aK5f&#xA;++LRAqRWhLcgBRQFXtmKsf8AzD/5QDzN/wBsq+/6hnxVkGKsRtfIKprevai19c2kWq3iXMcFjMYF&#xA;olnbwFpeCq/PnC/7RWhHfFUd/g22/wCrrqv/AEnz/wDNWKu/wbbf9XXVf+k+f/mrFXHyZbEUOqat&#xA;Q9f9PuB+IauKoPR/y10TTbBLQXepuEeRwyapqUQ/eSNJTglyFFOVPfriqM/wPov/AC06r/3GNV/7&#xA;KcVcPI2igU+s6t/3GNV/7KsVSfzl5C0mTylrIhn1D6z9RuPQll1C+ueDekxqqTzSLvTwxVF6L5A8&#xA;tDR7BbmCS6cQReoZp53Vm4CpMbSFPw2xVG/8q+8kn+80W0lX+SWMSofmj8lP3Yq7/lXnkCtf8M6T&#xA;Xx+o23/NGKpF568o6DZ6BaDSNE0yB/0tpAZfq0ca8H1O3VgPTTvWh9q4qzeCzs7ckwQRxFtmKIqk&#xA;j3oMVVsVdiqGuNOtbi7tLuVSZ7Jne3apFDIhjaoHX4WOKonFXYq7FXYq7FXYqpT3UMJCsSZG+xGo&#xA;5OfkB+vFUFax3k8936rG3i9UVjQ/Gf3abFwTTan2fvxVdqOnO9mkFmojCyBmUHjUUIO9G3qe+KqE&#xA;VpryKA06uRQE8jTvUiq16UHv1xVSl0/XyqAXIYpQqS9KHgQ1aL8VWO3hiqvbW+rpcQCeYupqZyN1&#xA;oqKABstKvXt0xV5f5V8w6kfz11zy5Nrd9ewWkk1ytpO4+qxpcW8LQxxFAvJ0ZJ/gZOCrQhi9aqss&#xA;8zeavNWm+ebGwtLKSfRXgjkk4W0sglLrd+v/AKQgZIjA0FtQH7Xqn6FWNQ+Y/wAw9Y/JzzHea3p1&#xA;umom2vo7hJfXsVSA2IdjCjwSPI0cjvHR1QclK82A9RlXr2KqUErPLcK3SOQKvyMat+tsVVcVdirs&#xA;VdirsVdirsVdirsVdiqnPHbyIFnVHQOjASAEc1cNGd/2g4BX3xVUxV2KuxV2KuxV2KuxVb6ieoY6&#xA;/GFDU9iafwxVTmu4IWCM1ZDusSgs5/2Iqae+KqdL6fqfqsXgKNKfp3VfxxVVgtoYARGtC27sSSzH&#xA;xZjUn6cVXRxKjSMK1lbm1fEKF2+hcVX4q7FXYq7FXk3l6OGL88tcuS8bvd84FuAh5Ew21s7WvqPb&#xA;Ekxhlk4rcBd9lryxV6zirH/zD/5QDzN/2yr7/qGfFWQYqh7X+/u/+Mo/5NR4qiMVdirsVdirsVdi&#xA;rsVdirsVdiqHvv7hf+MsP/J1cVRGKuxV2KqUsrLNCgpSQsG+hScVVcVWySxRLzldUUdWYgD7ziqh&#xA;9dL/AO88Ly/5ZHBP+CalR/qg4qhRHdy6myTsUT0VJ9E0H2j8Jc/F9I44qj4beGFSsSBAdzTqT4k9&#xA;ziqpirsVdirsVdirsVdirzDyT5aT/GQ1qO80i8mskvrW41eyuTc6hfJdTrOkV2pQLD6FF2Ej9gvB&#xA;dsVen4qx/wDMP/lAPM3/AGyr7/qGfFWQYqh7X+/u/wDjKP8Ak1HiqIxV2KuxVQsnZ7cMxJPJ9z7M&#xA;RiqvirsVWyOI42kPRAWNOtAK4q2rBlDDoRUfTireKuxVDaiivboG3HrQ/wDJ1cVROKqMl5aRGkky&#xA;I38pYA/diq369G391HLKe3FGAP8Asm4r+OKoW4kv3u7UxxLEoZ9pTUn4D2So/HFUT9XuX/vbkgd1&#xA;iUID9J5t9xxVfHZWsbh1jBkHSRyXf/gmq2Kq2KqQib60ZduJQJTvUEn+OKquKuxV2KuxV2KuxV2K&#xA;uxV5Lo3lr8v9F/Oq/v49TtLHX73nJHpUlq1pcTtcxQq/ozu6xXEP7nkFii5ByxZzuMVZN5g/MQaP&#xA;56sPLs0MS2lzFDJNcSSFZT9YW8IaGOnxLCbACXf/AHYn0qsfvPzDuvNH5U+atSi0K8RRHqlj6FI4&#xA;pYoo7dik063T27CqOCyoGIO29MVeqYqgILyFbm8UiQkSivGORh/dIOqqfDFVf69B/LL/AMiZf+ac&#xA;Vd9dT/fU3/Itv6Yq764T0gmI8eIH6yMVQ9jdSfVl420rjk+4MYH2z/M4xVEfWp/+WOX74v8Aqpir&#xA;vXuz0tiP9Z1A/CuKqV3JffVZiYYwvBq1lNaUPglPxxVdEdQMSUWFRxFDyZu3yXFV/DUD/u6Ie3pM&#xA;fx9T+GKu+r3R+1dMP9RUH/Eg+KrJdOWVQsk8zUZW+1x+ywb9gL4Yqv8A0dZn7cQl/wCMpMn/ABMt&#xA;iqtHDFEKRoqDwUAD8MVXYqpyRF5YnrQRkkjxqpGKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV8/wD5&#xA;fxaz/wAr31iDVdZju4rn1rt9JNrcRss6LCYmaZ7eBGaGPhwjZjwBBFT8RVe/NFE7BmRWZQQrEAkA&#xA;0qB86DFUh/MIAeQPM1BSulXxNPH6s+KsgxVD2v8Af3f/ABlH/JqPFURirsVdiqF0yNI7NURQqhno&#xA;B/rnFUVirsVUb1VaznVgCpjaoP8AqnFV8AAhjAFAFAA+jFV+KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KvEPKwig/P7UrW1t4P0cv1nhcrJeSym6+r28k/N5ppIi5WZRRYxQLSvwjkq&#xA;9vxVj/5h/wDKAeZv+2Vff9Qz4qyDFUPa/wB/d/8AGUf8mo8VRGKuxV2KqNmjJbhWFG5MafNicVVs&#xA;Vdiq2RBJG0Z6OCpp1oRTFW1UKoUdAKD6MVbxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV475H8s6dL+cWu+YdKgtH0+2kmt1vLFrVyskkMCyQzGOfkiiWN2Ef1cHmSxdq0xVnup+ebO&#xA;w83WnltrWWWW5SFpLlSgSNrtbo26kEhm5/o6YEj7Pw167Ksf8x+d4tT/ACy8zXNzpt5Yv9Wv7ERL&#xA;E94pkW0LFvVtBNGERnMbuSFV1Za7VxV6LiqhbKwmuiQQDKCPcekgxVXxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVinlf8ALrT/AC3qtxqFjqV/KLlBHJZz&#xA;vC8HBXd4wAsSP8Blfj8XfeuKpzqHlny9qN9Ff3+m211ewIYobmaJHkVGrVQxFafEfvPicVSHzN5e&#xA;0PQPyz8zWOi2MOn2Z0y/k+r26BE5m1YFqDvRRirMMVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY/+Yf8AygHmb/tlX3/UM+KsgxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsY1jz9p+l+abf&#xA;QJ7eVjLHFJPeLx9OL6yt00AK15tz/R01eI2+Hx2VY5q35h6T5g/LPzHO0Umn3EtncWcNnOVeR5Lr&#xA;TUvIAnplwxeC7iNOzEr2xV6VirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVS6+8t+X9Qv4dRvtOtrm/t0McF1LEjSIjVqqsRUDc/efE4qqaPoejaJ&#xA;ZCx0exg0+zDM4t7aNYo+TdTxUAYqjcVY9J5tujqWoWNl5f1G/wD0bMttcXED2CRmR4I7ii+vdQuf&#xA;gnXqvXFW/wDE2tf9Snqv/I3Sv+y7FXf4m1r/AKlPVf8AkbpX/Zdirv8AE2tf9Snqv/I3Sv8AsuxV&#xA;Dad521DULRbu18q6s8DM6BjJpa7xuY22N9/MpxVE/wCJta/6lPVf+Rulf9l2Ku/xNrX/AFKeq/8A&#xA;I3Sv+y7FVG8846nZ2c95ceVNWWC2jeaVhJpZIRFLMaC+32GKr4fNerTQpNH5T1YxyKHQ+ppQqGFR&#xA;/wAf2Kr/APE2tf8AUp6r/wAjdK/7LsVd/ibWv+pT1X/kbpX/AGXYqhtQ87ahYQLPdeVdWSN5oLdS&#xA;JNLb95czJBEKC+7ySKMVRP8AibWv+pT1X/kbpX/Zdirv8Ta1/wBSnqv/ACN0r/suxV3+Jta/6lPV&#xA;f+Rulf8AZdiqGuPO2oW93aWsvlXVhPes6W6+ppZqY0Mjbi+2+FT1xVE/4m1r/qU9V/5G6V/2XYq7&#xA;/E2tf9Snqv8AyN0r/suxV3+Jta/6lPVf+Rulf9l2KocedtQOotpw8q6t9bSFbhk9TS6em7MgNfr1&#xA;PtIcVRH+Jta/6lPVf+Rulf8AZdirv8Ta1/1Keq/8jdK/7LsVd/ibWv8AqU9V/wCRulf9l2Koe187&#xA;ahdT3kEHlXVmlsJhb3Q9TSxxkaGOcCpvt/3cyHbFUR/ibWv+pT1X/kbpX/Zdirv8Ta1/1Keq/wDI&#xA;3Sv+y7FXf4m1r/qU9V/5G6V/2XYqmGg6zHrOmi+jt5rT99cW8ltcen6qSWs728it6Tyx/biNCrHb&#xA;FUwxV2KuxVbIrtGyo3ByCFelaEjY0PWmKvL/ACJp/wCbFv5yR/MU0sujfUisjEW6o8woBJIY2JaY&#xA;legjACcfj/YxV6lirsVSHz0msyeVb9NFNyNSZV+rtZGITg81qV9VkUgD7Q5KxWoUhqYqx/8ALGPz&#xA;qlzqQ8yR30AWO2VIrw2jxNcUdriS2e14AR8mCBeA2UOfidgFWfYq7FWEfmlbefLi10mPymzAfW/9&#xA;ySRiIs8XAhVcysirEW+2QHpt8DioxVGflwvnldGu/wDGiRpqrX1w0KwOskQtmIaJYyFT4EqVXkOV&#xA;BU7nFWV4q7FXmfn61/MM6vqJ0t9Rm02ddL/RQsBZ8badWvBdPIk5VpFjpby0qOTcVqF5UVTf8sE8&#xA;+Jb6yPN4l9V7+STTzM0LEQMo+BPRJ+BWB4saV/lUYqzXFXYq8K1ey/O6e4luNE/SitDJfCxg1BrH&#xA;jyeFUjnaVJABurSRR+mUqeDUFXxV6r5Cj8wxeU7FPMLSPqy+t6zzcfUZPWf0S6o0gRjDwqnNyv2S&#xA;7kciqyDFUBr6alJoWoppTcNTa1mWxcBSVnMbCI0Yquz06kDFXlMth+bEGi28sh1S5l/R88HC3a0j&#xA;vGnGoKbeWdneUpyt2LOiSNxAKqanFXrmli5XTLQXTvJdCGMTySKqO0nAcmZELIpJ6hSQO2KonFWL&#xA;/mDB5zk021fynMY7+KflJFSLhIhicKJGk6IJOJNNz8sVedw2/wCdEXpLpseoreyQXDo+pSWJt/i9&#xA;SKJLloubfWFFJFf4xRIk6PIVVeseVRq48saQNaUrrAsrcaipYORcekvq1ZaAnnWtMVTTFXmv5jL+&#xA;YLeZLNfLa6oLBY4H1FrY2f1d7cTkXMMIlZJFuWgLMshOzKir9piFWJ6hbf8AORyND6SfuRDp5VbS&#xA;W0VzMsEzXAuA4VeUt0y+q6Eqo4kK68gVXu2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV53c/nNpen6xq&#xA;ttq1lJaaXpdy9o2or60pZ40MruyCFY1RYkd2KyswC/ZxVVs/zx8iXi2DwvdmPUHWGKRraQIsryvE&#xA;sbsdg1Y2NPDfFUGv/OQ/5ZuZRFdXMoh3cx28jjilvJdTtVa7QRQOZe4Ipviqd6X+avlPUtWtdKtz&#xA;dLdX7ldN9W2kjS6RVZ2lgcijxqicmPYEVG4xVLLL87vK+ptqP6It7m9i0yyvr2efh6cfLT1id4at&#xA;uGZZ17bdDvUYqhdD/Pny1eW90dTtbjT7qxIN5Gkcs0caSW5uIWZ2jgZfVVJFQMgqyHsVLKphL+df&#xA;ktbi6tYxeT3Ns0kSxx2sjCWWGRI3jjIBBYGVTv23xVA6T/zkF5A1GAMr3KzxLE1/EsLOLYSKzM8r&#xA;jb04/Sfk3gK0oRiqL8zfm/YaXaaXc6dp8upLq1ul1bMecSiKaVI4WISOeU+oGZhxjOy79RiqD038&#xA;/PKU9vG97b3dpcSxxSiBInnoZ45pYoyyqo9R0tJiF/yOtdsVbvP+cgfIMQu4Lc3dxqltbtcR6cLa&#xA;VZJSlsbqSNSV4gxxKWevTelaYqzTyp5jh8w6ONRjha3YTT201u5DFJbaVoXHIbEEpyU+BHTpiqb4&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUivP8Eeg/wBd/R/1f63L6vr+l6f1&#xA;z0X9blz+H1PR58q78a4qwi+/6F9+s6Nz/RH9xcfUvS9L0/qvCf1fWp/urn6lOX+7OnxYqmVt/wAq&#xA;G4S/Vv8AD3p/Vx6vD6rx+r/UJfDbh9Q9WtNvT5V2xVW0T/lVf+M7b9B/VP0vw1D0fqXD0PV5wfXq&#xA;+n8Pr/3da78em1cVa0f/AJUjyn/RH6C5ehd/WPq31ev1fgn1vnx/Y9Phyrtx49qYqg7H/oXyi/VP&#xA;8PV9O56fVuXD0P8ASedfi/3n68v2PbFVcf8AKhv0Qf8AlHv0T8Va/VfR+1Dy6/D9r0f+FxVBT/8A&#xA;Kif0Jrn6M/Rfp/VJv0r+iPR+tfVvSk9anpfH/derWnbl74qmnm3/AJVX9Y0z/EX1X0fqTfVPXp9W&#xA;+qepDw5V+H+89P0v2vtcdueKt23/ACpX0ofq36C9P/RvQ4fVqf3Nx9V40/4p+s+n/k86bVxVDX3/&#xA;ACoemofXv8P0pH+kvV+rfZ24epXtSlfaldsVZP5L/wAP/oCP9A1+o+vc8+Vef1n6xJ9Z51/a9fnW&#xA;m38vw0xVPMVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">boundary_freqs_col</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>350.330078</stDim:w>
            <stDim:h>213.029297</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F87F117407206811871F9E7E2B9597B3</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F87F117407206811871F9E7E2B9597B3</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F11740720681188C6D1BEB2AB3A9D</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:902cceb4-3579-f046-92a3-f45bfa70c25f</stRef:instanceID>
            <stRef:documentID>xmp.did:F97F11740720681188C6E637F2DC8AD9</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F77F11740720681188C6D1BEB2AB3A9D</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681188C6D1BEB2AB3A9D</stEvt:instanceID>
                  <stEvt:when>2012-07-06T09:33:05-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681188C6E637F2DC8AD9</stEvt:instanceID>
                  <stEvt:when>2012-08-12T12:48:55-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811871F9E7E2B9597B3</stEvt:instanceID>
                  <stEvt:when>2012-11-30T09:25:34-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -200.27 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 200.27 li
330.373 200.27 li
330.373 0 li
cp
clp
[1 0 0 1 0 0 ]ct
30.9192 163.57 mo
30.9192 3.83105 li
30.9192 3.53752 30.6812 3.29956 30.3877 3.29956 cv
30.0942 3.29956 29.8562 3.53752 29.8562 3.83105 cv
29.8562 163.57 li
29.8562 163.863 30.0942 164.101 30.3877 164.101 cv
30.6812 164.101 30.9192 163.863 30.9192 163.57 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
f
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 52 /four putdup 54 /six putdup 56 /eight putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55977C35> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/AXKJWV+ArialMT /ArialMT findfont ct_VMDictPut/AXKJWV+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]AXKJWV+ArialMT nfAXKJWV+ArialMT*1 [7.65804 0 0 -7.65804 0 0 ]msf14.0884 166.942 mo(0.0)[4.25879 2.12744 0 ]xsh14.0884 134.868 mo(0.2)[4.25879 2.12744 0 ]xsh14.0884 102.794 mo(0.4)[4.25879 2.12744 0 ]xsh14.0884 70.7207 mo(0.6)[4.25879 2.12744 0 ]xsh14.0884 38.645 mo(0.8)[4.25879 2.12744 0 ]xsh14.0884 6.57178 mo(1.0)[4.25879 2.12744 0 ]xsh26.9961 164.733 mo
30.3877 164.733 li
30.6812 164.733 30.9192 164.495 30.9192 164.202 cv
30.9192 163.908 30.6812 163.67 30.3877 163.67 cv
26.9961 163.67 li
26.7026 163.67 26.4646 163.908 26.4646 164.202 cv
26.4646 164.495 26.7026 164.733 26.9961 164.733 cv
f
26.9961 132.659 mo
30.3877 132.659 li
30.6812 132.659 30.9192 132.421 30.9192 132.127 cv
30.9192 131.834 30.6812 131.596 30.3877 131.596 cv
26.9961 131.596 li
26.7026 131.596 26.4646 131.834 26.4646 132.127 cv
26.4646 132.421 26.7026 132.659 26.9961 132.659 cv
f
26.9961 100.585 mo
30.3877 100.585 li
30.6812 100.585 30.9192 100.347 30.9192 100.053 cv
30.9192 99.7597 30.6812 99.5217 30.3877 99.5217 cv
26.9961 99.5217 li
26.7026 99.5217 26.4646 99.7597 26.4646 100.053 cv
26.4646 100.347 26.7026 100.585 26.9961 100.585 cv
f
26.9961 68.5115 mo
30.3877 68.5115 li
30.6812 68.5115 30.9192 68.2735 30.9192 67.98 cv
30.9192 67.6864 30.6812 67.4485 30.3877 67.4485 cv
26.9961 67.4485 li
26.7026 67.4485 26.4646 67.6864 26.4646 67.98 cv
26.4646 68.2735 26.7026 68.5115 26.9961 68.5115 cv
f
26.9961 36.4363 mo
30.3877 36.4363 li
30.6812 36.4363 30.9192 36.1983 30.9192 35.9048 cv
30.9192 35.6112 30.6812 35.3733 30.3877 35.3733 cv
26.9961 35.3733 li
26.7026 35.3733 26.4646 35.6112 26.4646 35.9048 cv
26.4646 36.1983 26.7026 36.4363 26.9961 36.4363 cv
f
26.9961 4.36255 mo
30.3877 4.36255 li
30.6812 4.36255 30.9192 4.12459 30.9192 3.83105 cv
30.9192 3.53752 30.6812 3.29956 30.3877 3.29956 cv
26.9961 3.29956 li
26.7026 3.29956 26.4646 3.53752 26.4646 3.83105 cv
26.4646 4.12459 26.7026 4.36255 26.9961 4.36255 cv
f
44.7986 57.9419 mo
44.7986 46.147 li
43.7356 46.147 li
43.7356 57.9419 li
44.7986 57.9419 li
f
84.4543 56.2412 mo
84.4543 45.001 li
83.3913 45.001 li
83.3913 56.2412 li
84.4543 56.2412 li
f
124.11 61.3872 mo
124.11 49.2426 li
123.047 49.2426 li
123.047 61.3872 li
124.11 61.3872 li
f
163.764 62.8003 mo
163.764 51.1919 li
162.701 51.1919 li
162.701 62.8003 li
163.764 62.8003 li
f
203.421 54.2666 mo
203.421 42.7749 li
202.358 42.7749 li
202.358 54.2666 li
203.421 54.2666 li
f
243.075 48.8174 mo
243.075 38.147 li
242.012 38.147 li
242.012 48.8174 li
243.075 48.8174 li
f
282.73 39.6948 mo
282.73 30.3193 li
281.667 30.3193 li
281.667 39.6948 li
282.73 39.6948 li
f
322.387 30.4765 mo
322.387 21.6543 li
321.324 21.6543 li
321.324 30.4765 li
322.387 30.4765 li
f
45.9628 51.8881 mo
45.9628 52.8247 45.2041 53.584 44.2671 53.584 cv
43.3306 53.584 42.5713 52.8247 42.5713 51.8881 cv
42.5713 50.9516 43.3306 50.1919 44.2671 50.1919 cv
45.2041 50.1919 45.9628 50.9516 45.9628 51.8881 cv
f
44.7986 53.8901 mo
44.7986 53.0971 li
45.2631 52.8924 45.5869 52.4285 45.5879 51.8881 cv
45.5869 51.3478 45.263 50.8837 44.7986 50.6789 cv
44.7986 49.8858 li
45.6851 50.1206 46.3377 50.9282 46.3379 51.8881 cv
46.3379 51.8881 li
46.3379 51.8881 li
46.3379 51.8881 li
46.3377 52.8482 45.685 53.6555 44.7986 53.8901 cv
43.7356 53.89 mo
42.8494 53.6553 42.1965 52.8482 42.1963 51.8881 cv
42.1965 50.9282 42.8494 50.1207 43.7356 49.8858 cv
43.7356 50.679 li
43.2714 50.884 42.9473 51.348 42.9463 51.8881 cv
42.9473 52.4283 43.2713 52.8922 43.7356 53.097 cv
43.7356 53.89 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
44.2671 53.9589 mo
44.0833 53.9589 43.9052 53.9349 43.7356 53.89 cv
43.7356 53.097 li
43.8981 53.1687 44.078 53.2087 44.2671 53.209 cv
44.4562 53.2087 44.636 53.1687 44.7986 53.0971 cv
44.7986 53.8901 li
44.629 53.935 44.4508 53.9589 44.2671 53.9589 cv
.75021 .679683 .670222 .90164 cmyk
f
43.7356 50.679 mo
43.7356 49.8858 li
43.9052 49.8409 44.0833 49.8169 44.2671 49.8168 cv
44.4508 49.8169 44.629 49.8409 44.7986 49.8858 cv
44.7986 50.6789 li
44.636 50.6072 44.4562 50.5672 44.2671 50.5669 cv
44.078 50.5672 43.8982 50.6072 43.7356 50.679 cv
f
85.6186 50.4707 mo
85.6186 51.4072 84.8589 52.1665 83.9228 52.1665 cv
82.9858 52.1665 82.2266 51.4072 82.2266 50.4707 cv
82.2266 49.5337 82.9858 48.7749 83.9228 48.7749 cv
84.8589 48.7749 85.6186 49.5337 85.6186 50.4707 cv
f
83.3913 52.4726 mo
82.5049 52.238 81.8517 51.4308 81.8515 50.4707 cv
81.8517 49.5102 82.5049 48.7032 83.3913 48.4687 cv
83.3913 49.2617 li
82.9266 49.4663 82.6025 49.93 82.6016 50.4707 cv
82.6025 51.0109 82.9266 51.4749 83.3913 51.6796 cv
83.3913 52.4726 li
84.4543 52.4725 mo
84.4543 51.6793 li
84.9184 51.4745 85.2426 51.0107 85.2437 50.4707 cv
85.2436 50.4707 li
85.2426 49.9304 84.9185 49.4667 84.4543 49.262 cv
84.4543 48.4688 li
85.3402 48.7035 85.9934 49.5102 85.9936 50.4707 cv
85.9936 50.4707 li
85.9936 50.4707 li
85.9936 50.4707 li
85.9934 51.4308 85.3402 52.2378 84.4543 52.4725 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
83.9228 52.5415 mo
83.7391 52.5415 83.5609 52.5175 83.3913 52.4726 cv
83.3913 51.6796 li
83.5539 51.7512 83.7337 51.7911 83.9228 51.7915 cv
84.1119 51.7911 84.2917 51.7511 84.4543 51.6793 cv
84.4543 52.4725 li
84.2847 52.5175 84.1066 52.5415 83.9228 52.5415 cv
84.4543 49.262 mo
84.2917 49.1902 84.1119 49.1503 83.9228 49.1499 cv
83.7337 49.1503 83.5539 49.1901 83.3913 49.2617 cv
83.3913 48.4687 li
83.5609 48.4238 83.7391 48.3999 83.9228 48.3999 cv
84.1066 48.3999 84.2847 48.4239 84.4543 48.4688 cv
84.4543 49.262 li
.75021 .679683 .670222 .90164 cmyk
f
125.274 55.1714 mo
125.274 56.1084 124.515 56.8677 123.578 56.8677 cv
122.641 56.8677 121.882 56.1084 121.882 55.1714 cv
121.882 54.2353 122.641 53.4756 123.578 53.4756 cv
124.515 53.4756 125.274 54.2353 125.274 55.1714 cv
f
123.047 57.1738 mo
122.16 56.9392 121.507 56.1317 121.507 55.1714 cv
121.508 54.2118 122.16 53.4042 123.047 53.1695 cv
123.047 53.9626 li
122.582 54.1674 122.258 54.6315 122.257 55.1714 cv
122.258 55.7121 122.582 56.176 123.047 56.3808 cv
123.047 57.1738 li
124.11 57.1738 mo
124.11 56.3806 li
124.574 56.1759 124.898 55.712 124.899 55.1714 cv
124.898 54.6317 124.574 54.1677 124.11 53.9627 cv
124.11 53.1696 li
124.996 53.4044 125.649 54.2117 125.649 55.1714 cv
125.649 55.1714 li
125.649 55.1714 li
125.649 55.1714 li
125.649 56.1317 124.996 56.939 124.11 57.1738 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
123.578 57.2427 mo
123.394 57.2427 123.216 57.2187 123.047 57.1738 cv
123.047 56.3808 li
123.209 56.4524 123.389 56.4923 123.578 56.4927 cv
123.767 56.4923 123.947 56.4524 124.11 56.3806 cv
124.11 57.1738 li
123.94 57.2187 123.762 57.2427 123.578 57.2427 cv
124.11 53.9627 mo
123.947 53.8909 123.767 53.8509 123.578 53.8505 cv
123.389 53.8509 123.209 53.8909 123.047 53.9626 cv
123.047 53.1695 li
123.216 53.1246 123.394 53.1006 123.578 53.1006 cv
123.762 53.1007 123.94 53.1246 124.11 53.1696 cv
124.11 53.9627 li
.75021 .679683 .670222 .90164 cmyk
f
164.929 56.875 mo
164.929 57.8115 164.17 58.5708 163.233 58.5708 cv
162.297 58.5708 161.537 57.8115 161.537 56.875 cv
161.537 55.938 162.297 55.1792 163.233 55.1792 cv
164.17 55.1792 164.929 55.938 164.929 56.875 cv
f
163.764 58.877 mo
163.764 58.0839 li
164.229 57.8792 164.553 57.4153 164.554 56.875 cv
164.554 56.875 li
164.553 56.3344 164.229 55.8706 163.764 55.666 cv
163.764 54.873 li
164.651 55.1075 165.304 55.9145 165.304 56.875 cv
165.304 56.875 li
165.304 56.875 li
165.304 56.875 li
165.304 57.8352 164.651 58.6423 163.764 58.877 cv
162.701 58.8769 mo
161.816 58.6421 161.162 57.8351 161.162 56.875 cv
161.162 55.9145 161.816 55.1077 162.701 54.8731 cv
162.701 55.6662 li
162.237 55.871 161.913 56.3347 161.912 56.875 cv
161.913 57.4149 162.237 57.8788 162.701 58.0837 cv
162.701 58.8769 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
163.233 58.9458 mo
163.049 58.9458 162.871 58.9218 162.701 58.8769 cv
162.701 58.0837 li
162.864 58.1554 163.044 58.1955 163.233 58.1958 cv
163.422 58.1955 163.602 58.1555 163.764 58.0839 cv
163.764 58.877 li
163.595 58.9219 163.417 58.9458 163.233 58.9458 cv
162.701 55.6662 mo
162.701 54.8731 li
162.871 54.8282 163.049 54.8043 163.233 54.8042 cv
163.417 54.8042 163.595 54.8282 163.764 54.873 cv
163.764 55.666 li
163.602 55.5944 163.422 55.5545 163.233 55.5542 cv
163.044 55.5545 162.864 55.5945 162.701 55.6662 cv
.75021 .679683 .670222 .90164 cmyk
f
204.584 48.3486 mo
204.584 49.2852 203.825 50.0445 202.89 50.0445 cv
201.952 50.0445 201.193 49.2852 201.193 48.3486 cv
201.193 47.4116 201.952 46.6528 202.89 46.6528 cv
203.825 46.6528 204.584 47.4116 204.584 48.3486 cv
f
202.358 50.3506 mo
201.471 50.116 200.818 49.3087 200.818 48.3486 cv
200.818 47.3883 201.471 46.5811 202.358 46.3466 cv
202.358 47.1395 li
201.893 47.344 201.569 47.8078 201.568 48.3486 cv
201.569 48.889 201.893 49.353 202.358 49.5577 cv
202.358 50.3506 li
203.421 50.3504 mo
203.421 49.5571 li
203.884 49.3522 204.208 48.8886 204.209 48.3486 cv
204.209 48.3486 li
204.208 47.8083 203.884 47.3449 203.421 47.1401 cv
203.421 46.3468 li
204.306 46.5816 204.959 47.3885 204.959 48.3486 cv
204.959 48.3486 li
204.959 48.3486 li
204.959 48.3486 li
204.959 49.3084 204.306 50.1155 203.421 50.3504 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
202.89 50.4194 mo
202.706 50.4194 202.528 50.3954 202.358 50.3506 cv
202.358 49.5577 li
202.521 49.6292 202.7 49.6691 202.89 49.6695 cv
203.079 49.6691 203.259 49.629 203.421 49.5571 cv
203.421 50.3504 li
203.252 50.3954 203.073 50.4194 202.89 50.4194 cv
203.421 47.1401 mo
203.259 47.0682 203.079 47.0282 202.89 47.0278 cv
202.7 47.0282 202.521 47.068 202.358 47.1395 cv
202.358 46.3466 li
202.528 46.3017 202.706 46.2778 202.89 46.2778 cv
203.073 46.2778 203.252 46.3018 203.421 46.3468 cv
203.421 47.1401 li
.75021 .679683 .670222 .90164 cmyk
f
244.24 43.2988 mo
244.24 44.2358 243.48 44.9951 242.544 44.9951 cv
241.608 44.9951 240.848 44.2358 240.848 43.2988 cv
240.848 42.3628 241.608 41.6031 242.544 41.6031 cv
243.48 41.6031 244.24 42.3628 244.24 43.2988 cv
f
243.075 45.3012 mo
243.075 44.5081 li
243.54 44.3033 243.864 43.8393 243.865 43.2988 cv
243.864 42.7592 243.54 42.2951 243.075 42.0901 cv
243.075 41.297 li
243.962 41.5318 244.615 42.339 244.615 43.2988 cv
244.615 43.2988 li
244.615 43.2988 li
244.615 43.2988 li
244.615 44.2593 243.962 45.0665 243.075 45.3012 cv
242.012 45.3011 mo
241.127 45.0663 240.473 44.2594 240.473 43.2988 cv
240.473 42.3389 241.127 41.532 242.012 41.2971 cv
242.012 42.0904 li
241.548 42.2955 241.224 42.7596 241.223 43.2988 cv
241.224 43.8389 241.548 44.3029 242.012 44.5079 cv
242.012 45.3011 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
242.544 45.3701 mo
242.36 45.3701 242.182 45.3461 242.012 45.3011 cv
242.012 44.5079 li
242.175 44.5797 242.355 44.6198 242.544 44.6201 cv
242.733 44.6198 242.913 44.5798 243.075 44.5081 cv
243.075 45.3012 li
242.906 45.3461 242.728 45.3701 242.544 45.3701 cv
242.012 42.0904 mo
242.012 41.2971 li
242.182 41.2521 242.36 41.2281 242.544 41.228 cv
242.728 41.2281 242.906 41.252 243.075 41.297 cv
243.075 42.0901 li
242.913 42.0183 242.733 41.9783 242.544 41.978 cv
242.355 41.9783 242.175 42.0184 242.012 42.0904 cv
.75021 .679683 .670222 .90164 cmyk
f
283.894 34.8037 mo
283.894 35.7407 283.136 36.4995 282.198 36.4995 cv
281.263 36.4995 280.504 35.7407 280.504 34.8037 cv
280.504 33.8672 281.263 33.1079 282.198 33.1079 cv
283.136 33.1079 283.894 33.8672 283.894 34.8037 cv
f
282.73 36.8057 mo
282.73 36.0128 li
283.195 35.8083 283.518 35.3445 283.519 34.8037 cv
283.52 34.8037 li
283.518 34.2633 283.195 33.7993 282.73 33.5947 cv
282.73 32.8017 li
283.616 33.0363 284.269 33.8436 284.27 34.8037 cv
284.27 34.8037 li
284.27 34.8037 li
284.27 34.8037 li
284.269 35.7641 283.616 36.5712 282.73 36.8057 cv
281.667 36.8055 mo
280.781 36.5707 280.129 35.7638 280.129 34.8037 cv
280.129 33.8439 280.781 33.0368 281.667 32.802 cv
281.667 33.5953 li
281.203 33.8002 280.88 34.2637 280.879 34.8037 cv
280.88 35.3441 281.203 35.8074 281.667 36.0122 cv
281.667 36.8055 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
282.198 36.8745 mo
282.014 36.8745 281.836 36.8505 281.667 36.8055 cv
281.667 36.0122 li
281.829 36.0841 282.009 36.1241 282.198 36.1245 cv
282.387 36.1241 282.567 36.0843 282.73 36.0128 cv
282.73 36.8057 li
282.56 36.8506 282.382 36.8745 282.198 36.8745 cv
281.667 33.5953 mo
281.667 32.802 li
281.836 32.757 282.014 32.733 282.198 32.7329 cv
282.382 32.7329 282.56 32.7569 282.73 32.8017 cv
282.73 33.5947 li
282.567 33.5232 282.387 33.4833 282.198 33.4829 cv
282.009 33.4833 281.829 33.5234 281.667 33.5953 cv
.75021 .679683 .670222 .90164 cmyk
f
323.551 25.7847 mo
323.551 26.7217 322.792 27.4805 321.855 27.4805 cv
320.917 27.4805 320.158 26.7217 320.158 25.7847 cv
320.158 24.8481 320.917 24.0888 321.855 24.0888 cv
322.792 24.0888 323.551 24.8481 323.551 25.7847 cv
f
322.387 27.7866 mo
322.387 26.9935 li
322.851 26.7889 323.175 26.3253 323.176 25.7847 cv
323.175 25.2445 322.851 24.7807 322.387 24.5759 cv
322.387 23.7828 li
323.273 24.0175 323.926 24.8248 323.926 25.7847 cv
323.926 25.7847 li
323.926 25.7847 li
323.926 25.7847 li
323.926 26.745 323.273 27.552 322.387 27.7866 cv
321.324 27.7862 mo
320.437 27.5511 319.783 26.7452 319.783 25.7847 cv
319.783 24.8245 320.437 24.017 321.324 23.7826 cv
321.324 24.5753 li
320.858 24.7798 320.534 25.244 320.533 25.7847 cv
320.534 26.3258 320.858 26.7905 321.324 26.9947 cv
321.324 27.7862 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
321.855 27.8555 mo
321.672 27.8552 321.494 27.8311 321.324 27.7862 cv
321.324 26.9947 li
321.486 27.0659 321.666 27.1055 321.855 27.1055 cv
322.045 27.1051 322.224 27.0652 322.387 26.9935 cv
322.387 27.7866 li
322.217 27.8315 322.039 27.8555 321.855 27.8555 cv
322.387 24.5759 mo
322.224 24.5042 322.045 24.4642 321.855 24.4638 cv
321.666 24.4642 321.486 24.5039 321.324 24.5753 cv
321.324 23.7826 li
321.494 23.7377 321.672 23.7139 321.855 23.7139 cv
322.039 23.7139 322.217 23.7379 322.387 23.7828 cv
322.387 24.5759 li
.75021 .679683 .670222 .90164 cmyk
f
44.7986 133.12 mo
44.7986 123.433 li
44.7986 113.746 li
44.7986 104.058 li
44.7986 94.3706 li
44.7986 84.6841 li
44.7986 74.9966 li
44.7986 65.3101 li
43.7356 65.3101 li
43.7356 74.9966 li
43.7356 84.6841 li
43.7356 94.3706 li
43.7356 104.058 li
43.7356 113.746 li
43.7356 123.433 li
43.7356 133.12 li
44.7986 133.12 li
.256596 .202548 .207828 3.0518e-05 cmyk
f
84.4543 121.859 mo
84.4543 112.519 li
84.4543 103.179 li
84.4543 93.8384 li
84.4543 84.4975 li
83.3913 84.4975 li
83.3913 93.8384 li
83.3913 103.179 li
83.3913 112.519 li
83.3913 121.859 li
84.4543 121.859 li
f
124.11 117.341 mo
124.11 107.926 li
124.11 98.5102 li
124.11 89.0942 li
123.047 89.0942 li
123.047 98.5102 li
123.047 107.926 li
123.047 117.341 li
124.11 117.341 li
f
163.764 96.9155 mo
163.764 84.0161 li
163.764 71.1167 li
162.701 71.1167 li
162.701 84.0161 li
162.701 96.9155 li
163.764 96.9155 li
f
203.421 98.5689 mo
203.421 87.3081 li
203.421 76.0464 li
202.358 76.0464 li
202.358 87.3081 li
202.358 98.5689 li
203.421 98.5689 li
f
243.075 88.8198 mo
243.075 79.1362 li
243.075 69.4526 li
242.012 69.4526 li
242.012 79.1362 li
242.012 88.8198 li
243.075 88.8198 li
f
282.73 65.7553 mo
282.73 48.625 li
281.667 48.625 li
281.667 65.7553 li
282.73 65.7553 li
f
322.387 46.4502 mo
322.387 32.0815 li
321.324 32.0815 li
321.324 46.4502 li
322.387 46.4502 li
f
45.9628 101.835 mo
45.9628 102.772 45.2041 103.532 44.2671 103.532 cv
43.3306 103.532 42.5713 102.772 42.5713 101.835 cv
42.5713 100.899 43.3306 100.139 44.2671 100.139 cv
45.2041 100.139 45.9628 100.899 45.9628 101.835 cv
f
44.7986 103.838 mo
44.7986 103.045 li
45.263 102.84 45.5869 102.376 45.5879 101.835 cv
45.5869 101.295 45.263 100.831 44.7986 100.626 cv
44.7986 99.8331 li
45.6851 100.068 46.3377 100.875 46.3379 101.835 cv
46.3379 101.835 li
46.3379 101.835 li
46.3379 101.835 li
46.3377 102.795 45.6851 103.603 44.7986 103.838 cv
43.7356 103.838 mo
42.8494 103.603 42.1965 102.795 42.1963 101.835 cv
42.1965 100.875 42.8494 100.068 43.7356 99.8331 cv
43.7356 100.626 li
43.2714 100.831 42.9473 101.295 42.9463 101.835 cv
42.9473 102.376 43.2714 102.84 43.7356 103.045 cv
43.7356 103.838 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
44.2671 103.907 mo
44.0833 103.907 43.9052 103.883 43.7356 103.838 cv
43.7356 103.045 li
43.8982 103.116 44.078 103.156 44.2671 103.157 cv
44.4562 103.156 44.636 103.116 44.7986 103.045 cv
44.7986 103.838 li
44.629 103.883 44.4508 103.907 44.2671 103.907 cv
43.7356 100.626 mo
43.7356 99.8331 li
43.9052 99.7882 44.0833 99.7642 44.2671 99.7642 cv
44.4508 99.7642 44.629 99.7881 44.7986 99.8331 cv
44.7986 100.626 li
44.636 100.554 44.4562 100.515 44.2671 100.514 cv
44.078 100.515 43.8982 100.555 43.7356 100.626 cv
.256596 .202548 .207828 3.0518e-05 cmyk
f
85.6186 104.063 mo
85.6186 104.999 84.8589 105.758 83.9228 105.758 cv
82.9858 105.758 82.2266 104.999 82.2266 104.063 cv
82.2266 103.126 82.9858 102.367 83.9228 102.367 cv
84.8589 102.367 85.6186 103.126 85.6186 104.063 cv
f
83.3913 106.064 mo
82.5049 105.83 81.8517 105.023 81.8515 104.063 cv
81.8517 103.103 82.5048 102.295 83.3913 102.061 cv
83.3913 102.854 li
82.9267 103.059 82.6025 103.523 82.6016 104.063 cv
82.6025 104.603 82.9266 105.067 83.3913 105.271 cv
83.3913 106.064 li
84.4543 106.064 mo
84.4543 105.271 li
84.9185 105.066 85.2426 104.603 85.2437 104.063 cv
85.2426 103.523 84.9184 103.059 84.4543 102.854 cv
84.4543 102.061 li
85.3403 102.296 85.9934 103.103 85.9936 104.063 cv
85.9936 104.063 li
85.9936 104.063 li
85.9936 104.063 li
85.9934 105.023 85.3402 105.83 84.4543 106.064 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
83.9228 106.133 mo
83.7391 106.133 83.5609 106.109 83.3913 106.064 cv
83.3913 105.271 li
83.5539 105.343 83.7336 105.383 83.9228 105.383 cv
84.1119 105.383 84.2917 105.343 84.4543 105.271 cv
84.4543 106.064 li
84.2847 106.109 84.1066 106.133 83.9228 106.133 cv
84.4543 102.854 mo
84.2917 102.782 84.1119 102.742 83.9228 102.742 cv
83.7337 102.742 83.5539 102.782 83.3913 102.854 cv
83.3913 102.061 li
83.5609 102.016 83.7391 101.992 83.9228 101.992 cv
84.1066 101.992 84.2847 102.016 84.4543 102.061 cv
84.4543 102.854 li
.256596 .202548 .207828 3.0518e-05 cmyk
f
125.274 103.711 mo
125.274 104.648 124.515 105.408 123.578 105.408 cv
122.641 105.408 121.882 104.648 121.882 103.711 cv
121.882 102.774 122.641 102.015 123.578 102.015 cv
124.515 102.015 125.274 102.774 125.274 103.711 cv
f
123.047 105.714 mo
122.16 105.479 121.507 104.671 121.507 103.711 cv
121.507 102.751 122.16 101.943 123.047 101.709 cv
123.047 102.502 li
122.582 102.707 122.258 103.17 122.257 103.711 cv
122.258 104.252 122.582 104.716 123.047 104.921 cv
123.047 105.714 li
124.11 105.714 mo
124.11 104.921 li
124.574 104.716 124.898 104.252 124.899 103.711 cv
124.898 103.17 124.574 102.707 124.11 102.502 cv
124.11 101.709 li
124.996 101.944 125.649 102.751 125.649 103.711 cv
125.649 103.711 li
125.649 103.711 li
125.649 103.711 li
125.649 104.671 124.996 105.479 124.11 105.714 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
123.578 105.783 mo
123.394 105.783 123.216 105.759 123.047 105.714 cv
123.047 104.921 li
123.209 104.992 123.389 105.032 123.578 105.033 cv
123.767 105.032 123.947 104.992 124.11 104.921 cv
124.11 105.714 li
123.94 105.759 123.762 105.783 123.578 105.783 cv
124.11 102.502 mo
123.947 102.43 123.767 102.391 123.578 102.39 cv
123.389 102.391 123.209 102.43 123.047 102.502 cv
123.047 101.709 li
123.216 101.664 123.394 101.64 123.578 101.64 cv
123.762 101.64 123.94 101.664 124.11 101.709 cv
124.11 102.502 li
.256596 .202548 .207828 3.0518e-05 cmyk
f
164.929 84.0161 mo
164.929 84.9526 164.17 85.7124 163.233 85.7124 cv
162.297 85.7124 161.537 84.9526 161.537 84.0161 cv
161.537 83.0796 162.297 82.3198 163.233 82.3198 cv
164.17 82.3198 164.929 83.0796 164.929 84.0161 cv
f
163.764 86.0185 mo
163.764 85.2254 li
164.229 85.0205 164.553 84.5564 164.554 84.0161 cv
164.553 83.4759 164.229 83.0117 163.764 82.8068 cv
163.764 82.0137 li
164.651 82.2485 165.304 83.0561 165.304 84.0161 cv
165.304 84.0161 li
165.304 84.0161 li
165.304 84.0161 li
165.304 84.9762 164.651 85.7837 163.764 86.0185 cv
162.701 86.0184 mo
161.815 85.7835 161.162 84.9762 161.162 84.0161 cv
161.162 83.0561 161.815 82.2488 162.701 82.0138 cv
162.701 82.8071 li
162.237 83.0121 161.913 83.4762 161.912 84.0161 cv
161.913 84.556 162.237 85.0201 162.701 85.2251 cv
162.701 86.0184 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
163.233 86.0874 mo
163.049 86.0873 162.871 86.0634 162.701 86.0184 cv
162.701 85.2251 li
162.864 85.297 163.044 85.337 163.233 85.3374 cv
163.422 85.337 163.602 85.2971 163.764 85.2254 cv
163.764 86.0185 li
163.595 86.0634 163.417 86.0874 163.233 86.0874 cv
162.701 82.8071 mo
162.701 82.0138 li
162.871 81.9689 163.049 81.9449 163.233 81.9448 cv
163.417 81.9449 163.595 81.9688 163.764 82.0137 cv
163.764 82.8068 li
163.602 82.7351 163.422 82.6952 163.233 82.6948 cv
163.044 82.6952 162.864 82.7352 162.701 82.8071 cv
.256596 .202548 .207828 3.0518e-05 cmyk
f
204.584 87.357 mo
204.584 88.2944 203.825 89.0532 202.89 89.0532 cv
201.952 89.0532 201.193 88.2944 201.193 87.357 cv
201.193 86.4214 201.952 85.6616 202.89 85.6616 cv
203.825 85.6616 204.584 86.4214 204.584 87.357 cv
f
202.358 89.3595 mo
201.471 89.125 200.818 88.3177 200.818 87.357 cv
200.819 86.3975 201.471 85.5901 202.358 85.3555 cv
202.358 86.1485 li
201.893 86.3533 201.569 86.8174 201.568 87.357 cv
201.569 87.8982 201.893 88.362 202.358 88.5666 cv
202.358 89.3595 li
203.421 89.3592 mo
203.421 88.566 li
203.884 88.3612 204.208 87.8977 204.209 87.357 cv
204.208 86.8178 203.884 86.3541 203.421 86.149 cv
203.421 85.3557 li
204.307 85.5907 204.959 86.3979 204.959 87.357 cv
204.959 87.357 li
204.959 87.357 li
204.959 87.357 li
204.959 88.3174 204.306 89.1244 203.421 89.3592 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
202.89 89.4282 mo
202.706 89.4282 202.528 89.4043 202.358 89.3595 cv
202.358 88.5666 li
202.521 88.6381 202.7 88.6779 202.89 88.6782 cv
203.079 88.6779 203.259 88.6379 203.421 88.566 cv
203.421 89.3592 li
203.252 89.4042 203.073 89.4282 202.89 89.4282 cv
203.421 86.149 mo
203.259 86.0771 203.079 86.0369 202.89 86.0366 cv
202.7 86.0369 202.521 86.0768 202.358 86.1485 cv
202.358 85.3555 li
202.528 85.3106 202.706 85.2867 202.89 85.2867 cv
203.073 85.2867 203.252 85.3107 203.421 85.3557 cv
203.421 86.149 li
.256596 .202548 .207828 3.0518e-05 cmyk
f
244.24 79.0815 mo
244.24 80.019 243.48 80.7778 242.544 80.7778 cv
241.608 80.7778 240.848 80.019 240.848 79.0815 cv
240.848 78.145 241.608 77.3862 242.544 77.3862 cv
243.48 77.3862 244.24 78.145 244.24 79.0815 cv
f
243.075 81.084 mo
243.075 80.2909 li
243.54 80.0862 243.864 79.6224 243.865 79.0815 cv
243.864 78.5415 243.54 78.0778 243.075 77.8731 cv
243.075 77.0801 li
243.962 77.3146 244.615 78.1213 244.615 79.0815 cv
244.615 79.0815 li
244.615 79.0815 li
244.615 79.0815 li
244.615 80.0424 243.962 80.8494 243.075 81.084 cv
242.012 81.0838 mo
241.127 80.8491 240.473 80.0425 240.473 79.0815 cv
240.473 78.1212 241.127 77.3148 242.012 77.0802 cv
242.012 77.8734 li
241.548 78.0782 241.224 78.5419 241.223 79.0815 cv
241.224 79.622 241.548 80.0858 242.012 80.2907 cv
242.012 81.0838 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
242.544 81.1528 mo
242.36 81.1528 242.182 81.1288 242.012 81.0838 cv
242.012 80.2907 li
242.175 80.3625 242.355 80.4025 242.544 80.4029 cv
242.733 80.4025 242.913 80.3626 243.075 80.2909 cv
243.075 81.084 li
242.906 81.1289 242.728 81.1528 242.544 81.1528 cv
242.012 77.8734 mo
242.012 77.0802 li
242.182 77.0352 242.36 77.0113 242.544 77.0112 cv
242.728 77.0113 242.906 77.0352 243.075 77.0801 cv
243.075 77.8731 li
242.913 77.8015 242.733 77.7616 242.544 77.7612 cv
242.355 77.7616 242.175 77.8016 242.012 77.8734 cv
.256596 .202548 .207828 3.0518e-05 cmyk
f
283.894 56.9268 mo
283.894 57.8633 283.136 58.6225 282.198 58.6225 cv
281.263 58.6225 280.504 57.8633 280.504 56.9268 cv
280.504 55.9898 281.263 55.231 282.198 55.231 cv
283.136 55.231 283.894 55.9898 283.894 56.9268 cv
f
282.73 58.9287 mo
282.73 58.1358 li
283.195 57.9311 283.518 57.4672 283.52 56.9268 cv
283.519 56.9268 li
283.518 56.3859 283.195 55.9221 282.73 55.7176 cv
282.73 54.9247 li
283.616 55.1592 284.269 55.9664 284.27 56.9268 cv
284.27 56.9268 li
284.27 56.9268 li
284.27 56.9268 li
284.269 57.8868 283.616 58.6942 282.73 58.9287 cv
281.667 58.9285 mo
280.781 58.6936 280.129 57.8865 280.129 56.9268 cv
280.129 55.9666 280.781 55.1597 281.667 54.925 cv
281.667 55.7182 li
281.203 55.923 280.88 56.3864 280.879 56.9268 cv
280.88 57.4667 281.203 57.9303 281.667 58.1352 cv
281.667 58.9285 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
282.198 58.9976 mo
282.014 58.9975 281.836 58.9735 281.667 58.9285 cv
281.667 58.1352 li
281.829 58.2071 282.009 58.2472 282.198 58.2475 cv
282.387 58.2472 282.567 58.2073 282.73 58.1358 cv
282.73 58.9287 li
282.56 58.9736 282.382 58.9975 282.198 58.9976 cv
281.667 55.7182 mo
281.667 54.925 li
281.836 54.88 282.014 54.856 282.198 54.856 cv
282.382 54.856 282.56 54.8799 282.73 54.9247 cv
282.73 55.7176 li
282.567 55.6461 282.387 55.6063 282.198 55.606 cv
282.009 55.6063 281.829 55.6463 281.667 55.7182 cv
.256596 .202548 .207828 3.0518e-05 cmyk
f
323.551 38.8657 mo
323.551 39.8023 322.792 40.562 321.855 40.562 cv
320.917 40.562 320.158 39.8023 320.158 38.8657 cv
320.158 37.9292 320.917 37.1699 321.855 37.1699 cv
322.792 37.1699 323.551 37.9292 323.551 38.8657 cv
f
321.324 40.8683 mo
320.436 40.6338 319.783 39.8259 319.783 38.8657 cv
319.783 37.9056 320.437 37.098 321.324 36.8636 cv
321.324 37.6564 li
320.858 37.8609 320.534 38.325 320.533 38.8657 cv
320.534 39.4064 320.858 39.8708 321.324 40.0755 cv
321.324 40.8683 li
322.387 40.8681 mo
322.387 40.0749 li
322.851 39.8699 323.175 39.4059 323.176 38.8657 cv
323.175 38.3255 322.851 37.8617 322.387 37.6569 cv
322.387 36.8639 li
323.273 37.0986 323.926 37.9058 323.926 38.8657 cv
323.926 38.8657 li
323.926 38.8657 li
323.926 38.8657 li
323.926 39.8256 323.273 40.6332 322.387 40.8681 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
321.855 40.937 mo
321.672 40.937 321.494 40.9131 321.324 40.8683 cv
321.324 40.0755 li
321.486 40.1469 321.666 40.1867 321.855 40.187 cv
322.045 40.1867 322.224 40.1467 322.387 40.0749 cv
322.387 40.8681 li
322.217 40.913 322.039 40.937 321.855 40.937 cv
322.387 37.6569 mo
322.224 37.5852 322.045 37.5452 321.855 37.5449 cv
321.666 37.5452 321.486 37.585 321.324 37.6564 cv
321.324 36.8636 li
321.494 36.8188 321.672 36.795 321.855 36.795 cv
322.039 36.795 322.217 36.8189 322.387 36.8639 cv
322.387 37.6569 li
.256596 .202548 .207828 3.0518e-05 cmyk
f
44.2707 54.7546 mo
49.4401 54.72 li
49.4404 54.72 li
54.1811 54.6853 li
54.1815 54.6853 li
58.5594 54.6506 li
58.5597 54.6506 li
62.6261 54.6159 li
62.6264 54.6159 li
66.4228 54.5813 li
66.4231 54.5813 li
69.9832 54.5466 li
69.9835 54.5466 li
73.3351 54.5119 li
73.3354 54.5119 li
76.5019 54.4773 li
76.5022 54.4773 li
79.5017 54.4426 li
79.5021 54.4426 li
82.3527 54.4079 li
82.353 54.4079 li
85.0678 54.3732 li
87.6604 54.3386 li
90.1407 54.3039 li
92.5175 54.2692 li
94.8001 54.2346 li
96.9942 54.1999 li
99.1083 54.1652 li
99.1088 54.1652 li
103.356 54.092 li
103.356 54.0919 li
107.31 54.0192 li
107.311 54.0192 li
111.009 53.9459 li
111.009 53.9459 li
114.482 53.8732 li
114.483 53.8732 li
117.758 53.7999 li
117.759 53.7999 li
120.855 53.7271 li
120.856 53.7271 li
123.794 53.6539 li
123.795 53.6539 li
126.59 53.5806 li
126.59 53.5806 li
130.796 53.4654 li
130.797 53.4653 li
134.714 53.3496 li
134.715 53.3496 li
138.382 53.2339 li
138.383 53.2338 li
141.827 53.1181 li
141.828 53.1181 li
145.078 53.0023 li
145.08 53.0023 li
148.898 52.8588 li
148.899 52.8587 li
152.479 52.7156 li
152.48 52.7156 li
155.849 52.5725 li
155.85 52.5725 li
159.031 52.4289 li
159.033 52.4288 li
163.016 52.2399 li
163.018 52.2398 li
166.743 52.0508 li
166.745 52.0507 li
170.242 51.8613 li
170.243 51.8612 li
173.537 51.6737 li
173.539 51.6736 li
176.656 51.4866 li
176.658 51.4865 li
179.613 51.299 li
179.615 51.2989 li
183.779 51.0205 li
183.781 51.0204 li
187.663 50.7416 li
187.665 50.7414 li
191.3 50.466 li
191.302 50.4658 li
194.719 50.1904 li
194.722 50.1902 li
197.948 49.9168 li
197.951 49.9166 li
201.002 49.6436 li
201.006 49.6433 li
206.663 49.1028 li
206.667 49.1024 li
211.815 48.5677 li
211.819 48.5672 li
216.542 48.038 li
216.546 48.0375 li
220.907 47.5135 li
220.911 47.513 li
224.964 46.995 li
224.968 46.9945 li
228.753 46.4823 li
228.757 46.4817 li
232.307 45.9749 li
232.31 45.9743 li
235.652 45.4734 li
235.656 45.4728 li
238.813 44.9777 li
238.816 44.9772 li
241.809 44.4874 li
241.813 44.4869 li
244.656 44.0035 li
244.659 44.0029 li
247.369 43.5249 li
247.372 43.5243 li
249.959 43.0511 li
249.962 43.0506 li
252.437 42.5833 li
252.439 42.5827 li
254.812 42.1208 li
254.814 42.1202 li
257.092 41.6637 li
257.095 41.6631 li
259.285 41.212 li
259.288 41.2114 li
261.397 40.7661 li
261.399 40.7656 li
263.435 40.3256 li
263.437 40.3251 li
265.402 39.891 li
265.404 39.8905 li
267.303 39.4618 li
267.305 39.4613 li
269.143 39.0385 li
269.145 39.038 li
270.926 38.621 li
270.928 38.6206 li
272.656 38.2094 li
272.658 38.209 li
274.334 37.8037 li
274.336 37.8033 li
275.966 37.4034 li
275.967 37.403 li
277.551 37.0095 li
277.553 37.0091 li
279.094 36.6214 li
279.095 36.621 li
280.596 36.2392 li
280.597 36.2389 li
282.059 35.8634 li
282.06 35.8631 li
283.487 35.4935 li
283.488 35.4932 li
284.878 35.13 li
284.879 35.1297 li
286.239 34.7723 li
286.239 34.7721 li
287.565 34.4215 li
287.565 34.4213 li
288.863 34.0761 li
288.59 33.0489 li
287.292 33.3941 li
287.293 33.3939 li
285.968 33.7445 li
285.968 33.7443 li
284.609 34.1017 li
284.61 34.1015 li
283.219 34.4648 li
283.22 34.4645 li
281.793 34.8341 li
281.795 34.8338 li
280.333 35.2093 li
280.334 35.209 li
278.833 35.5909 li
278.834 35.5905 li
277.293 35.9782 li
277.295 35.9778 li
275.711 36.3714 li
275.712 36.371 li
274.082 36.7709 li
274.084 36.7705 li
272.408 37.1758 li
272.41 37.1753 li
270.682 37.5864 li
270.684 37.586 li
268.902 38.003 li
268.904 38.0025 li
267.066 38.4254 li
267.068 38.4249 li
265.17 38.8536 li
265.172 38.8531 li
263.208 39.2872 li
263.21 39.2867 li
261.175 39.7266 li
261.177 39.7261 li
259.068 40.1714 li
259.07 40.1708 li
256.88 40.622 li
256.883 40.6214 li
254.605 41.078 li
254.608 41.0774 li
252.236 41.5393 li
252.239 41.5388 li
249.765 42.0061 li
249.768 42.0055 li
247.181 42.4786 li
247.184 42.4781 li
244.474 42.9561 li
244.477 42.9555 li
241.635 43.4389 li
241.638 43.4384 li
238.645 43.9281 li
238.648 43.9276 li
235.491 44.4227 li
235.494 44.4221 li
232.153 44.9231 li
232.156 44.9226 li
228.607 45.4294 li
228.61 45.4289 li
224.825 45.9411 li
224.829 45.9406 li
220.776 46.4586 li
220.78 46.4581 li
216.419 46.9821 li
216.423 46.9816 li
211.701 47.5109 li
211.705 47.5104 li
206.557 48.0451 li
206.562 48.0446 li
200.905 48.5852 li
200.908 48.5849 li
197.856 48.8578 li
197.858 48.8576 li
194.632 49.131 li
194.634 49.1309 li
191.217 49.4063 li
191.22 49.4061 li
187.585 49.6814 li
187.587 49.6813 li
183.705 49.9601 li
183.708 49.9599 li
179.544 50.2382 li
179.545 50.2381 li
176.59 50.4256 li
176.592 50.4255 li
173.475 50.6125 li
173.477 50.6124 li
170.183 50.7999 li
170.184 50.7998 li
166.687 50.9893 li
166.689 50.9892 li
162.964 51.1782 li
162.966 51.1781 li
158.982 51.3671 li
158.983 51.367 li
155.802 51.5105 li
155.804 51.5105 li
152.435 51.6536 li
152.436 51.6535 li
148.857 51.7966 li
148.858 51.7965 li
145.04 51.9401 li
145.041 51.94 li
141.791 52.0558 li
141.792 52.0557 li
138.347 52.1714 li
138.348 52.1714 li
134.682 52.2871 li
134.683 52.2871 li
130.766 52.4028 li
130.767 52.4028 li
126.561 52.518 li
126.562 52.518 li
123.767 52.5912 li
123.768 52.5912 li
120.83 52.6645 li
120.83 52.6645 li
117.734 52.7372 li
117.734 52.7372 li
114.459 52.8104 li
114.46 52.8104 li
110.987 52.8832 li
110.988 52.8832 li
107.29 52.9564 li
107.291 52.9564 li
103.337 53.0291 li
103.338 53.0291 li
99.0904 53.1024 li
99.0909 53.1024 li
96.9771 53.137 li
94.7836 53.1717 li
92.5017 53.2064 li
90.1255 53.241 li
87.6459 53.2757 li
85.0539 53.3103 li
82.3394 53.345 li
82.3397 53.345 li
79.4891 53.3797 li
79.4895 53.3797 li
76.4899 53.4143 li
76.4903 53.4143 li
73.3238 53.449 li
73.3241 53.449 li
69.9725 53.4837 li
69.9728 53.4837 li
66.4128 53.5183 li
66.4131 53.5183 li
62.6167 53.553 li
62.6171 53.553 li
58.5506 53.5877 li
58.551 53.5877 li
54.173 53.6223 li
54.1734 53.6223 li
49.4326 53.657 li
49.433 53.657 li
44.2635 53.6917 li
44.2707 54.7546 li
cp
.75021 .679683 .670222 .90164 cmyk
f
288.864 34.076 mo
290.13 33.7376 li
291.373 33.405 li
292.587 33.0793 li
293.776 32.7599 li
294.941 32.4469 li
296.081 32.1402 li
296.081 32.1404 li
297.201 31.8406 li
298.298 31.5471 li
298.297 31.5473 li
299.374 31.2607 li
299.373 31.2608 li
300.431 30.9806 li
300.43 30.9808 li
301.468 30.7073 li
301.468 30.7075 li
302.486 30.4409 li
302.485 30.4412 li
303.488 30.181 li
303.487 30.1812 li
304.47 29.9283 li
304.469 29.9287 li
305.437 29.6826 li
305.436 29.6829 li
306.387 29.4431 li
306.385 29.4436 li
307.321 29.2112 li
307.32 29.2116 li
308.24 28.9865 li
308.239 28.9869 li
309.145 28.7681 li
309.143 28.7686 li
310.035 28.5572 li
310.033 28.5577 li
310.911 28.3531 li
310.909 28.3537 li
311.775 28.1564 li
311.773 28.1569 li
312.624 27.967 li
312.622 27.9676 li
313.462 27.785 li
313.46 27.7855 li
314.288 27.6098 li
314.285 27.6104 li
315.1 27.4424 li
315.097 27.443 li
315.9 27.2819 li
315.897 27.2825 li
316.691 27.1287 li
316.687 27.1294 li
317.47 26.9834 li
317.466 26.9841 li
318.238 26.8454 li
318.235 26.846 li
318.997 26.7147 li
318.992 26.7154 li
319.744 26.5918 li
319.74 26.5925 li
320.481 26.4768 li
320.477 26.4774 li
321.211 26.3685 li
321.055 25.317 li
320.321 25.4259 li
320.317 25.4265 li
319.576 25.5422 li
319.572 25.5429 li
318.82 25.6665 li
318.816 25.6672 li
318.054 25.7985 li
318.051 25.7991 li
317.278 25.9378 li
317.275 25.9385 li
316.492 26.0845 li
316.489 26.0851 li
315.695 26.2389 li
315.691 26.2396 li
314.888 26.4007 li
314.885 26.4013 li
314.07 26.5693 li
314.067 26.5699 li
313.239 26.7457 li
313.237 26.7462 li
312.396 26.9289 li
312.393 26.9295 li
311.542 27.1194 li
311.539 27.12 li
310.673 27.3172 li
310.671 27.3178 li
309.792 27.5224 li
309.789 27.5229 li
308.898 27.7343 li
308.896 27.7348 li
307.99 27.9536 li
307.988 27.9539 li
307.067 28.179 li
307.065 28.1795 li
306.129 28.4119 li
306.127 28.4124 li
305.176 28.6521 li
305.175 28.6524 li
304.207 28.8985 li
304.205 28.8988 li
303.222 29.1518 li
303.221 29.152 li
302.218 29.4123 li
302.217 29.4126 li
301.198 29.6792 li
301.198 29.6794 li
300.16 29.9528 li
300.159 29.953 li
299.101 30.2333 li
299.101 30.2334 li
298.023 30.5201 li
298.023 30.5203 li
296.926 30.8137 li
295.806 31.1135 li
295.805 31.1137 li
294.665 31.4203 li
293.5 31.7333 li
292.311 32.0526 li
291.098 32.3783 li
289.856 32.7107 li
288.589 33.049 li
288.864 34.076 li
cp
f
44.2759 101.858 mo
49.4454 101.772 li
49.4463 101.772 li
54.187 101.685 li
54.1878 101.685 li
58.5657 101.598 li
58.5663 101.598 li
62.6327 101.513 li
62.6337 101.513 li
66.4301 101.426 li
66.4308 101.426 li
69.9909 101.34 li
69.9916 101.34 li
73.3432 101.254 li
73.3442 101.254 li
76.5107 101.168 li
76.5113 101.168 li
79.5108 101.082 li
79.5116 101.082 li
82.3622 100.996 li
82.3632 100.996 li
85.078 100.909 li
85.0786 100.909 li
87.6709 100.823 li
87.6717 100.823 li
90.1517 100.737 li
90.1525 100.737 li
92.529 100.651 li
92.53 100.651 li
94.8122 100.564 li
94.8128 100.564 li
97.0066 100.478 li
97.0074 100.478 li
99.1212 100.392 li
99.1223 100.392 li
103.369 100.21 li
103.371 100.21 li
107.325 100.029 li
107.326 100.029 li
111.024 99.8487 li
111.026 99.8486 li
114.499 99.667 li
114.5 99.6669 li
117.775 99.4863 li
117.777 99.4862 li
120.874 99.3055 li
120.876 99.3054 li
123.814 99.1237 li
123.815 99.1236 li
126.61 98.943 li
126.612 98.9429 li
130.817 98.6567 li
130.82 98.6565 li
134.737 98.3704 li
134.74 98.3702 li
138.406 98.0841 li
138.409 98.0839 li
141.854 97.7977 li
141.856 97.7975 li
145.106 97.5114 li
145.109 97.5112 li
148.927 97.1576 li
148.93 97.1573 li
152.51 96.8048 li
152.513 96.8045 li
155.882 96.451 li
155.885 96.4506 li
159.066 96.0971 li
159.069 96.0968 li
163.053 95.6319 li
163.057 95.6314 li
166.782 95.1656 li
166.786 95.165 li
170.283 94.7002 li
170.286 94.6997 li
173.58 94.2408 li
173.584 94.2402 li
176.702 93.7802 li
176.706 93.7796 li
179.661 93.3206 li
179.665 93.3199 li
183.829 92.6393 li
183.835 92.6383 li
187.717 91.9586 li
187.721 91.9577 li
191.356 91.2868 li
191.362 91.2857 li
194.779 90.6148 li
194.784 90.6139 li
198.01 89.9508 li
198.016 89.9496 li
201.068 89.2875 li
201.075 89.2859 li
206.732 87.9783 li
206.741 87.976 li
211.889 86.687 li
211.898 86.6846 li
216.621 85.4121 li
216.629 85.4097 li
220.991 84.1548 li
220.999 84.1524 li
225.052 82.9161 li
225.059 82.9136 li
228.845 81.6939 li
228.852 81.6914 li
232.402 80.4893 li
232.409 80.4868 li
235.751 79.3022 li
235.758 79.2998 li
238.915 78.1328 li
238.921 78.1304 li
241.914 76.981 li
241.92 76.9787 li
244.763 75.8468 li
244.768 75.8447 li
247.478 74.7314 li
247.484 74.7291 li
250.071 73.6324 li
250.076 73.6303 li
252.55 72.5522 li
252.555 72.5502 li
254.927 71.4906 li
254.931 71.4886 li
257.209 70.4456 li
257.213 70.4438 li
259.403 69.4184 li
259.407 69.4167 li
261.516 68.4098 li
261.519 68.4082 li
263.555 67.4189 li
263.558 67.4172 li
265.523 66.4446 li
265.526 66.4433 li
267.424 65.4901 li
267.427 65.4886 li
269.265 64.5511 li
269.267 64.55 li
271.048 63.631 li
271.051 63.6299 li
272.779 62.728 li
272.781 62.7268 li
274.457 61.8421 li
274.458 61.8413 li
276.088 60.9746 li
276.09 60.9737 li
277.674 60.1236 li
277.675 60.1229 li
279.216 59.2904 li
279.218 59.2898 li
280.719 58.4743 li
280.72 58.4738 li
282.181 57.6755 li
282.182 57.6752 li
283.609 56.8945 li
283.609 56.8941 li
285 56.1304 li
286.359 55.3833 li
286.36 55.383 li
287.685 54.653 li
287.685 54.6533 li
288.983 53.9399 li
288.471 53.0084 li
287.173 53.7217 li
287.172 53.722 li
285.847 54.4519 li
285.848 54.4517 li
284.488 55.1988 li
283.098 55.9623 li
283.098 55.962 li
281.672 56.7427 li
281.672 56.7425 li
280.21 57.5409 li
280.211 57.5403 li
278.71 58.3557 li
278.711 58.3551 li
277.17 59.1877 li
277.172 59.187 li
275.588 60.0371 li
275.589 60.0361 li
273.959 60.9028 li
273.961 60.9021 li
272.285 61.7868 li
272.287 61.7856 li
270.559 62.6875 li
270.561 62.6863 li
268.78 63.6053 li
268.782 63.6042 li
266.944 64.5417 li
266.947 64.5401 li
265.049 65.4933 li
265.051 65.4919 li
263.086 66.4646 li
263.09 66.4629 li
261.055 67.4522 li
261.058 67.4505 li
258.949 68.4574 li
258.952 68.4556 li
256.762 69.481 li
256.766 69.4792 li
254.489 70.5221 li
254.493 70.5201 li
252.121 71.5797 li
252.126 71.5777 li
249.651 72.6558 li
249.656 72.6537 li
247.071 73.7493 li
244.366 74.8607 li
241.529 75.9902 li
238.544 77.1366 li
235.393 78.3014 li
232.057 79.4837 li
228.515 80.6832 li
224.737 81.9007 li
220.693 83.1344 li
216.34 84.3869 li
211.626 85.657 li
206.488 86.9436 li
200.84 88.2492 li
197.793 88.9102 li
194.57 89.5726 li
194.574 89.5717 li
191.161 90.2419 li
187.529 90.9124 li
187.533 90.9115 li
183.655 91.5907 li
179.493 92.2709 li
179.498 92.2702 li
176.542 92.7292 li
176.546 92.7286 li
173.429 93.1886 li
173.433 93.1879 li
170.14 93.6469 li
170.143 93.6465 li
166.646 94.1113 li
166.65 94.1108 li
162.925 94.5766 li
162.93 94.5761 li
158.946 95.0409 li
158.949 95.0406 li
155.767 95.3941 li
155.771 95.3938 li
152.402 95.7473 li
152.405 95.7469 li
148.826 96.0995 li
148.829 96.0992 li
145.011 96.4527 li
145.013 96.4525 li
141.763 96.7386 li
141.766 96.7384 li
138.321 97.0245 li
138.323 97.0243 li
134.657 97.3104 li
134.66 97.3102 li
130.743 97.5964 li
130.745 97.5962 li
126.54 97.8823 li
126.541 97.8822 li
123.746 98.0629 li
123.748 98.0628 li
120.81 98.2444 li
120.812 98.2443 li
117.715 98.425 li
117.717 98.4249 li
114.442 98.6055 li
114.443 98.6055 li
110.97 98.7871 li
110.972 98.787 li
107.274 98.9677 li
107.276 98.9676 li
103.322 99.1483 li
103.324 99.1482 li
99.0769 99.3298 li
99.078 99.3298 li
96.9642 99.4157 li
96.965 99.4157 li
94.7712 99.5016 li
94.7718 99.5016 li
92.4895 99.5885 li
92.4906 99.5885 li
90.1141 99.6744 li
90.1149 99.6744 li
87.6349 99.7603 li
87.6357 99.7603 li
85.0434 99.8462 li
85.044 99.8462 li
82.3292 99.9331 li
82.3302 99.9331 li
79.4796 100.019 li
79.4804 100.019 li
76.4809 100.105 li
76.4815 100.105 li
73.315 100.192 li
73.316 100.192 li
69.9644 100.278 li
69.9652 100.278 li
66.4051 100.364 li
66.4058 100.364 li
62.6094 100.451 li
62.6105 100.451 li
58.5441 100.536 li
58.5446 100.535 li
54.1667 100.622 li
54.1675 100.622 li
49.4268 100.709 li
49.4277 100.709 li
44.2583 100.795 li
44.2759 101.858 li
cp
.256596 .202548 .207828 3.0518e-05 cmyk
f
288.983 53.9399 mo
290.249 53.2436 li
290.248 53.2442 li
291.49 52.565 li
292.704 51.9025 li
292.703 51.9032 li
293.891 51.2581 li
293.89 51.2586 li
295.055 50.6292 li
295.054 50.6299 li
296.195 50.0176 li
296.193 50.0186 li
297.313 49.4229 li
297.312 49.4236 li
298.408 48.8445 li
298.406 48.8456 li
299.483 48.2831 li
299.481 48.2842 li
300.539 47.7378 li
300.536 47.7391 li
301.574 47.2098 li
301.572 47.211 li
302.591 46.6978 li
302.588 46.6994 li
303.59 46.2023 li
303.588 46.2036 li
304.571 45.7231 li
304.568 45.7248 li
305.536 45.2604 li
305.532 45.262 li
306.483 44.8138 li
306.479 44.8157 li
307.416 44.3841 li
307.412 44.3857 li
308.333 43.9697 li
308.329 43.9717 li
309.235 43.5723 li
309.231 43.5741 li
310.119 43.1916 li
310.995 42.8254 li
311.857 42.4754 li
311.852 42.4773 li
312.701 42.1424 li
313.534 41.8255 li
314.359 41.5226 li
315.165 41.2373 li
315.963 40.9671 li
316.749 40.7121 li
317.525 40.4729 li
318.29 40.2495 li
319.043 40.0418 li
319.787 39.8497 li
320.519 39.6726 li
321.249 39.5094 li
321.017 38.472 li
320.283 38.6361 li
320.275 38.6382 li
319.533 38.8174 li
319.525 38.8194 li
318.773 39.0137 li
318.765 39.0159 li
318.003 39.2259 li
317.996 39.2281 li
317.223 39.4537 li
317.215 39.456 li
316.433 39.6972 li
316.426 39.6995 li
315.632 39.9568 li
315.625 39.959 li
314.822 40.2315 li
314.815 40.2338 li
314 40.5219 li
313.994 40.524 li
313.166 40.8282 li
313.161 40.8304 li
312.32 41.1502 li
312.314 41.1526 li
311.462 41.4885 li
311.457 41.4904 li
310.591 41.842 li
310.586 41.8442 li
309.707 42.2118 li
309.702 42.214 li
308.81 42.5977 li
308.806 42.5996 li
307.9 42.999 li
307.895 43.001 li
306.975 43.417 li
306.971 43.4187 li
306.034 43.8503 li
306.03 43.8522 li
305.079 44.3005 li
305.076 44.3021 li
304.108 44.7664 li
304.105 44.7681 li
303.121 45.2485 li
303.118 45.2499 li
302.116 45.7469 li
302.112 45.7485 li
301.094 46.2617 li
301.092 46.2628 li
300.053 46.7921 li
300.051 46.7934 li
298.993 47.3398 li
298.991 47.3409 li
297.914 47.9034 li
297.912 47.9045 li
296.815 48.4836 li
296.814 48.4844 li
295.694 49.0801 li
295.692 49.081 li
294.551 49.6933 li
294.55 49.694 li
293.385 50.3234 li
293.384 50.3239 li
292.196 50.9689 li
292.195 50.9695 li
290.981 51.6321 li
289.738 52.3115 li
289.737 52.3121 li
288.471 53.0084 li
288.983 53.9399 li
cp
f
44.0234 172.752 mo
321.892 172.752 li
322.185 172.752 322.423 172.514 322.423 172.22 cv
322.423 171.927 322.185 171.689 321.892 171.689 cv
44.0234 171.689 li
43.7299 171.689 43.4919 171.927 43.4919 172.22 cv
43.4919 172.514 43.7299 172.752 44.0234 172.752 cv
.75021 .679683 .670222 .90164 cmyk
f
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginAXKJWV+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368AFE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD10C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA7698FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C02C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001BCD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF200B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC49372EF96DD9EB13A793559C13CFDFE477> |-systemdict /gcheck known {setglobal} if end {end} ifendAXKJWV+ArialMT /Encoding getdup 51 /three putdup 53 /five putpop%ADOEndSubsetFont
/AXKJWV+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]AXKJWV+ArialMT nfAXKJWV+ArialMT*1 [7.65804 0 0 -7.65804 0 0 ]msf40.0073 183.355 mo(16)[4.25879 0 ]xsh79.6626 183.355 mo(32)[4.25879 0 ]xsh119.319 183.355 mo(64)[4.25879 0 ]xsh156.844 183.355 mo(128)[4.25879 4.25879 0 ]xsh196.5 183.355 mo(256)[4.25879 4.25879 0 ]xsh236.155 183.355 mo(512)[4.25879 4.25879 0 ]xsh273.681 183.355 mo(1024)[4.25879 4.25879 4.25879 0 ]xsh313.336 183.355 mo(2048)[4.25879 4.25879 4.25879 0 ]xsh44.7986 175.612 mo
44.7986 172.22 li
44.7986 171.927 44.5606 171.689 44.2671 171.689 cv
43.9736 171.689 43.7356 171.927 43.7356 172.22 cv
43.7356 175.612 li
43.7356 175.905 43.9736 176.143 44.2671 176.143 cv
44.5606 176.143 44.7986 175.905 44.7986 175.612 cv
f
84.4543 175.612 mo
84.4543 172.22 li
84.4543 171.927 84.2164 171.689 83.9229 171.689 cv
83.6293 171.689 83.3913 171.927 83.3913 172.22 cv
83.3913 175.612 li
83.3913 175.905 83.6293 176.143 83.9229 176.143 cv
84.2164 176.143 84.4543 175.905 84.4543 175.612 cv
f
124.11 175.612 mo
124.11 172.22 li
124.11 171.927 123.872 171.689 123.578 171.689 cv
123.285 171.689 123.047 171.927 123.047 172.22 cv
123.047 175.612 li
123.047 175.905 123.285 176.143 123.578 176.143 cv
123.872 176.143 124.11 175.905 124.11 175.612 cv
f
163.764 175.612 mo
163.764 172.22 li
163.764 171.927 163.526 171.689 163.233 171.689 cv
162.939 171.689 162.701 171.927 162.701 172.22 cv
162.701 175.612 li
162.701 175.905 162.939 176.143 163.233 176.143 cv
163.526 176.143 163.764 175.905 163.764 175.612 cv
f
203.421 175.612 mo
203.421 172.22 li
203.421 171.927 203.183 171.689 202.89 171.689 cv
202.596 171.689 202.358 171.927 202.358 172.22 cv
202.358 175.612 li
202.358 175.905 202.596 176.143 202.89 176.143 cv
203.183 176.143 203.421 175.905 203.421 175.612 cv
f
243.075 175.612 mo
243.075 172.22 li
243.075 171.927 242.837 171.689 242.544 171.689 cv
242.25 171.689 242.012 171.927 242.012 172.22 cv
242.012 175.612 li
242.012 175.905 242.25 176.143 242.544 176.143 cv
242.837 176.143 243.075 175.905 243.075 175.612 cv
f
282.73 175.612 mo
282.73 172.22 li
282.73 171.927 282.492 171.689 282.198 171.689 cv
281.905 171.689 281.667 171.927 281.667 172.22 cv
281.667 175.612 li
281.667 175.905 281.905 176.143 282.198 176.143 cv
282.492 176.143 282.73 175.905 282.73 175.612 cv
f
322.387 175.612 mo
322.387 172.22 li
322.387 171.927 322.149 171.689 321.855 171.689 cv
321.562 171.689 321.324 171.927 321.324 172.22 cv
321.324 175.612 li
321.324 175.905 321.562 176.143 321.855 176.143 cv
322.149 176.143 322.387 175.905 322.387 175.612 cv
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginAXKJWV+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC235F833AFCC30669C812FBF097879E1> |-/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52ABD0227B6CDD854C568D5A6F3817645C5> |-/B <1C60D8A8C9B64EDFF43B9E1D43B76E7425A98F23F483468D5596DA760F1554BAD296AA38A849FEE692D78BAC3B162E2013F61317550246D6F77AF27886D4E04AB44C473130F6FA990DAC6640A48EC2A80691207E5DDBCA7196686E7CD5C980FB78081AA13952C8D8F3373FF54323A4853D0F014ED4C5A1024912E545AAB4BA7F36D08386B7A08B38C3035C03383BB204897FB23E6B597B4E784900841F1858E5E1740AFA815171FE44AAE751E7961222B185E93D26B02E1EB5C1FF9174E0C619907BEEF9FED49CD2B96F29B7B01884> |-/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D314851DE59> |-/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F7F6ED1937D1E8A10> |-/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/q <1C60D8A8C9B7EF322408646A760FED70F2D8214740020E61993A1FFE89574C96FDDD947618591671EEE89936F7D0F90E6B11CE96BDCBF7B2C20479CB610D934D0AFBB0721CA3EA49A2D6AB8F9A4A9273E60BD1ACDAB1F7447DBAAB4DD124EC36ECC57CEC13712AB1CAC8625150F69DBA3C4F574D88196863F5C61CC51A61AE68D44A27F86FFD139CDEF75DF80AB81E> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-systemdict /gcheck known {setglobal} if end {end} ifendAXKJWV+ArialMT /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 66 /B putdup 67 /C putdup 68 /D putdup 70 /F putdup 78 /N putdup 80 /P putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 121 /y putpop%ADOEndSubsetFont
/AXKJWV+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 9{/.notdef}rp /B /C /D /.notdef /F 7{/.notdef}rp /N /.notdef /P 16{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /.notdef /q /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]AXKJWV+ArialMT nfAXKJWV+ArialMT*1 [7.97713 0 0 -7.97713 0 0 ]msf125.416 197.68 mo(Frequenc)sh159.116 197.68 mo(y at Boundary \(Binned\))[3.98877 2.21631 4.43652 2.21631 2.21631 5.32031 4.43652 4.43652 4.43652 4.43652 4.43652 2.65625 3.98828 2.21582 2.65625 5.32031 1.77246 4.43652 4.43652 4.43652 4.43652 0 ]xshAXKJWV+ArialMT*1 [0 -7.97705 -7.97705 0 0 0 ]msf6.84521 137.579 mo(Probability of Correct Decision)[-5.32031 -2.65625 -4.43652 -4.43652 -4.43652 -4.43652 -1.77246 -1.77246 -1.77246 -2.21582 -3.98828 -2.21582 -4.43652 -2.21533 -2.21631 -5.76074 -4.43652 -2.65625 -2.65625 -4.43652 -3.98877 -2.21631 -2.21631 -5.76074 -4.43652 -3.98877 -1.77246 -3.98828 -1.77246 -4.43652 0 ]yshAXKJWV+ArialMT*1 [7.65804 0 0 -7.65804 0 0 ]msf283.094 17.9126 mo(No Boundary)[5.53027 4.25879 2.12793 5.10742 4.25879 4.25879 4.25879 4.25879 4.25879 2.5498 0 ]xsh.256596 .202548 .207828 3.0518e-05 cmyk
AXKJWV+ArialMT*1 [7.65804 0 0 -7.65804 0 0 ]msf295.592 58.2876 mo(Boundary)[5.10742 4.25879 4.25879 4.25879 4.25879 4.25879 2.5498 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/AXKJWV+ArialMT*1 uf/AXKJWV+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Michael Frank) ()%%Title: (boundary_freqs_col.eps)%%CreationDate: 11/30/12 9:25 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\W"c7"'XJ9q:NfOR%)*Q^;(]PL8TgXmbbAnLEPhmIr3<JTk:'4JS$^Ls/rcX>t>TMhagP"I5"rIr(phsU,$$A3hKhIOKm%nqrj2=5_LJ^VA@1P/`4XZ)!Hs]r@B\&Hi]g-=U,<90e21/=@1TW)XbCVELnC\JPcZdWf":F9eR\c<L5&k^-)E+7Q/dI?_>!_;F*9%\'b%aW`03$#o(XF3fWRl%J/S*3ZN<);VP:rJ!d<=3aJ^?)"ed\0@.TsI)l]g_R.d/T1sZ,BpA4HWAHdSlNEU00gGa>iHP.nYi"_@%gX67U,IJ&/n9U$HdWP-Z>+/+b!RNJ1+;IZoO4g5g]Nd"Yj9-P'VUF-s7O2>#5nMsIQK(mMDrCF`qWNkcUW0)cke@73?q,cWY;,m.%L(fDGK$Ru@S6*o]@d-;3/+@#,'=&f6H6`*;h8Vi,P9BAJ=>H*0nmW5D,:h&%OQumQ8GQpK"0JK6;'D'],r.0r8M3^e,[gJ3Hm2!0%BG2cleWKjV_/-M?rQ/IF8b$uOBi0iP8!E8a^Art8,/J9kPJ4SrG,<T'^Oq^qi1hj*H9,_4?%P;OI\kdaKQ?-<?MgN%DAo8\B`c43%kY;_"3H%CO!N,LbnQQokjjpa1o:a[K);Gg[ULFFH%V$5P*'p3`O!VJ%T2'[\@bN?.85BP:SB._$o?&HJ!SbNCP\tFd>Q>Y3O#eAR%IP.'\+Z>O7:?Wpbk0fJnWhW<nUQi.Dc-QtVXB:5Q5HF]Xi<N=U-;n1l&!1]!<,79L@].hbK:>Z0k'j(XGSDo`&T7jr.fa#N98uLF%(2#PAH#(hmhSS^f&hjRj6kMX^.K%D%nZu=sSr+`k'h*L#MYL3dl.\f6CXZId'UD@fn5h)nV,A`nPtG%+8t4KbQH<aD9G[V9m;*P2%A[>JG^YpQ+.Mf9gZ%t8q7=8#b@[Tglhc;5+'\9Edn9q-"lVNBd]G)F@,CPJ-Q1lI65CR&j*#!d1.3+O,;YgknKV)?N7tdKoD?U]\%/rg6&nJ@2k5HuMl-e^>9#X<=ap_TR^R'9AD:"hgt_K"N^QDmjQR5-u43Q3_l,/k1Dd[G:='RC*JKoPedO=PCJPbA&\'TN\gYpDG`%FO]q'SMC&#V/Uh)$ra7S\i;nO`*YJb3retH+ibu*M5>0=pdo+\;@1;mm2p[SBE02WkXV$s$6R5JQD/V&n3TW?Th!0Q>dRklZ8,do%K^oYsi91lt`6i"13bnL,a+p9hMUFGDO5biD`D8%;U\"6qb#[('`>n8r;R]!1$EY`+L6,>+TsUJo$Y<'^hC3O\la1#V2hYG(&S5bm%FtBK^:0XXhl$N8f6;CT/V.MdO'K<CQ$Md3V='P(!NlS?)<c)CsGg^8t;R]!e)Z=)]NJ<[_Y0F8(ASiJ"+pF04>Jl0sWrfKQ05[',%jEZd`_nVEdo(#"2TPq3PoH.sapeUc[s*=Oa,^lEcV>ntXqHNhis(*tXG:'*WSWWs6oCS%9Qi8KLk\oiArTE^;9([u6Qi8M%l#5rB%rPto;-pPb__bW=soXFCLre9kKM..Z3.<3I%-(dbq.[>*)T;e('JD[/acNn7_/O.Ef)>P)5K:+0b.r(&!I]J]2Be375nS)/FSoFH6%>JcOp+Xo[+_"H/&nh#F#\>!5ta0HgiVEsX'o(Z9Wj*t/Lb%L38;S^"\*RY%n5R-.3M\JVa<r%a/8%O:/-.f6V38pD0I6hQRs$I3&%HZVY\L=X5UEKmg5*E?Ep8+A(\b@kB0O:_o]\E+VT/l+2(&6.l'jgm3h8V17%#H^A5SX&/*?tn=M/VR<$j%5PMD\P[.%0:t=Hu"gW%1J.H&Pkh&\T[]iK;u821^+7>sl+Cb@:%AuOLAE3fXCK\)8fb6q;1)0s$74C9QdsCa6;H^1.Et+d%LjFM"`TLn9-Fl]WmQf'q*-Oa%jCKg\)$4e/6h$th>>]?1.>NkY,1e4tYRrpoUW1u\e?31Y_1c;c"NNit;@o[(Ka(+5-2L@#_sDkN,E4M!NfC2*p,?8-$N:;NAIY+a%jRc#5R4eo\6Eda:"c)_'*@8uJeu%b6hj]K(#)B#KMXm!0$X8X!1J()ls640abaHVe@(o8@^''j9Ya!Q;@NPOnr&QlL`m(Ou_j(oq%Kfh.aBli'ng'TEB.:e$(h-<DJ/[&PGV6!o*U[fn6."*HN3\$K\KW]B-V:#-!%N)ZKnO^8]?H6J&LL>A<g2<X\6*?30a'CSJ6`4C#%>?;+83YlMbC8%C6H/nf(%QKbM,,K&A.W`VQIg&-qWZH>gV"0i<b^>M`CeZ=]i$PRF#9fj]F0kS*Ptdr\eq>r!,?9s2hOI?od:"P-%>HM+;7k:bg95$;%KpHiR2-;=H/FkjFZB-1n(I``mO\hi^[B&)Ncg&QQ?_?][77#[t)#g84L)F1DrNB+qZ6rY:4c[rSjiD6G<\7IX%;!i`7QVmUFq#c>>Ef+t\5cOUf.?C%fUm12EZ^+F!LY8(p3DH6Ba$*-RWA<jFQChc4:8P@OjZZ5rQ80J?q>;^Z,WXnRiKD>%99iM;%@RH\86OQ:_9Mc40?8HHHVpZgW>N'meS8)^^V7tLDKh>V@*mNW+SKIdLb$A^YWD.VP7ZeXLZEEd477O/!<_MOWlB08jF@NbE.0krI%=kQQ8`3nF*PgNDQo2j[>(AZ-MWfb`;fhS$G_!Y\?p.b6M3e)J?_YLAZ@4SXo\U:,C6Me/Zb"\A7/5'@WX8Ysk[>.R]CWa6?Un9ao%\!Xq$I7L,[Kdrb(/DDZ.N[?K%"g)<AeN?r.K[,r/\LStJFg=U[V(H8l$Ye6\l+/LqPpPJ$J<DHuD5:u6OgsJXGtQhu2Na$kMMsmb%:>)mcMe]qa_L\Y'Lp[7"1=oOGY0(oVAHaLoBmQ7(DMGp,R)/e;-l#o`28Y:R(#=]p58?/'+4)hEF\c%>9Yj9_bc\'?!!Q(MO<l8D%X,pmZ*4I-4<b.b&iHn[nN`b.Z<Lo)W5q,gR5U%jS5?)BnirY1^=ub'HQ1$])F9fg2dcNfDRo/=>^7hrJ$2c'q-g<glX\`k/l?,UV%5*]$%IB(i%qRooB=uXMGPU]Z!B,-h+&1E>+QhtX,VUKJ&5n=Jo`ep>c@Pm9Y53P*$4*bm!9r:;(ZU`6ZJ#7jT2"(!#\ro"AMLUR'%In==YO6>7<B`r@onb`Z!a,;OKh<B)%nT(B^SOi:W8Z1=/io`og:]+7qd@`oHUpYHBeJYcl^%\]%:V<BdU%KA#nWqV56u%&-'!3W<%<@,%fLGn%`ANEMQN`r;UReO`*[-W=/*AD%0C=rUkAP.kUC!in\e.\ISA_W3*%qu_r"+ZOKDZRT4j,#VXi[DfE$dX=^c"XX;:#a(1%#Ve%2N'iS2UYfs4!D=YX[K`kAj/p/epSd]R3JgO$NOFM<CN0]6g0LdER'`^aGeP.^+*S[a:QP?cfU\%LSc2S=V#:0Cp#E`bnZc`(%SFUkXC;3Eg<2VD.pKh@bRWe4V;P4':jkbKadMN5B*rOiT9E2B1N?7m&eCA7j\kk\pp"g_)jN`AI0nlTmH@ndjHCnlc-mka-[kksb%O,&^\'[P7MaNMLKs!btn80e'kJ/">rj:<DE5VZtPq*Ea\^U31r@Cu,4#73deRYp],p"TAB6"dPe*=W:MA>Q5DP@(+G:].m.".%%2%HB&N0T0XD&KZpj4cC0`tU]O)95gd^:?oeK)n\k#-M3aRuGtJrc't?"fboqLaaHGk_>3M%`3i@\WRJ)kbT@4F^[)=QNbUn7n`gIa+%4)q,USVUUI2*uU28[MTp72?#3dW@p)ih+^!7q4CCFW8d9XM[>2qMr$':sX2]->/^fU\`5[g66R61O)JeG6s`gpKI_^bg1S#neo#b%QMqk**lXCGoRQSrM)G>r:T<cq),6rsha>NWbbo]2l$E04(^CaG5LW(<I\btor];Z^a_td"iNPlSi/:J8-PCoRp^E5L$eG%T\o)`K%hr=]dNuXM,LSI.^g4Il4JJKWSa.W6%2LaMH4rR`<T2!=6Z/]$Xo%A,t0n]o6aA?D'nWMCm1qWm^O9lU:f"\$[LZB0_*#@rDak!YF%pR6_P4\l%B7\6ESWrjh)?lnfFeoNaf2jsM2G7(ORUVV%sfRFuf!r;P_.=!H"`^o[KQU,P?r)E[8)P(<`[WY5g+,kMLFo&K#s%DVe%L.nr=';0C7I:G*UDYg*^kVkt;nm$&-U]VRc70A:A[B2T5DY.OoIKCVJoB$jnCT&dK:cgZ'_Yg2#_dF/\KKF_:R!a2f?!p*2[/p,&%%ip)\%,H%6O4QnY_Iu"0o\Ku\?+!i6/%'Nq0mSZ<s"jM]+;Ob9I>X]NT&]smT(8YuIp=X'g:@N6q4HGgYlX_N&OJN1ZOT[cX$+jS%o+2[G8"FWqUF53G"gZ<P=1\A?i_Rn'28f^gi\hA-os?N;1h[--+ZajnY<NsnM6o;=XH8UsC4f+=r@Iu,7dV)Rg_I-e%6>8!I`!5c%M')IX"sQ:E3P\+6!;MJE20tEEie_#dHGHtS\"*3Jj6VCe=o(M'U\GeEO5KHe#ek]&UVFJKn#?'WL%Db3l,+5bpAj1Tjc%q80C0tQ%nCIe"0@-I8^_;m1A2XV<#b6uMAB:*Z7_g[q^BHo!-^%^mA+F4(:d;kH`j@gQE<'3sc128@O$IsOIN%d[#K0gTLenPBR78umKQkfD%,m&03m.@%:)H`d/*cW!Cpm5X5X7)eE\L=Ca.)!kmpa=E.4#o*l,R"rd@6@%e;>u-kr#b_h1h:iEdC9Uci[.4HjEb),%5`^P3^g]#%N..8qk.L3cE'A35!B_n=<9LG4]^\@f*G>nn,PiZ;aH,&m:5h@L;r7;7";5!JfP%bY1L=d24<.&Y,IMgD\A%4&D.%LAhY_INn6RtK%:$hdN1),J:H&'377c&-_2sldm</]+06/%FS-_R<k27c^Xm@QY#eU\Am#E;U8gHp*S[5*#gI\(hHG4U6@^Z;sK@uhNB,lu;lr5ZjV%^P:_YRReoWTL(Q=\;#$U(rU1['')#S_UfIN&<u^b*F^*GX=4_e>_,tEZ=9U/=(?W[@O.44MFkug!S'-Z_)'0mH#Ho\J^/LjI]?4@%,$r0qKtmM;f(WQ5nU=;[PQ7.OEK1U#9!Edpo0t(HX1<r4)G)(QCt')2_2HHmgTmJSaoocLi&I?(L&e/8,QcFME.pJ(g`rfUq@+!X%g-AjLRN8*Kd-N_:bhsJaWe9>So5OegXY^*)s$litiWXILdV*g8TXX1-R$:Se4#(u*:E'1mB`iIVMnr5X_#U*`!GQ:J)>MK!<i4]U%;YNp)N<*\]<aH.EV^H,0[UdN7J=QZ(Fo1Yh$BjSNdfc4f4L9eAF;$0<T./=e"C6L&)5p#MM]\/?6^[oUS,I@*YJt7gboi6&qNo3`%aRcZ*\N]BN.S#^27fM"L#D=bP"_,'YBTW"[0r't<&Rd:QY%EHn:Ys(CJ2gpkSrl;uO,km+U?Q"t'>,nD>`HMIJGmIsiB,?Ms/(LA%qoeY1a.iTGMT4V_VW5dkp[@3SIuY"[is$u0-l9c6F%_OCHsH_'s$<=Uhlo_nmsk?Bn&GCiAMEOq>6!?&Yppi"%C/!]!$ajZO@Fr7%RH<*_s'C^:E*Q(-.nYiP83\C_N,pd=V<#C8<2.IQ`3e_bXM6jaaetV*aT_^XK;.>5:1O.fAj!j.h.';KL`H]kO"86G+0k>LNd!XR%N`m&%QN"A^r3/Ea]0YXPP=?JoTk33(/d]S0@Vg'P:/#(oq>"!)GG[OCc@b9MgO?%(23lb:bT_'uY;Du^Q&/Sk\+CHTS&(1@.-f\)%aF7Rnq?jd8hAWBIF?&a$$GfQDmL9)X7RK#rNpS@(\t,P(2*b%4+#!KA$l%YGX]_!42+GM6(B$m@9a2h\ZdEX^>:*rK[`Vu=6%9a?%7/CP*%usP.4;eUB,umV?<3uk)[a_1tSE4/8pt9&LHd/lDXRa?<pY5rhJiA18p--pj2;9Wo<U*$oK``HT/M4-qWVG)<)/B\mBK"DE%4_#W:E22/Fdf)qN`eQBcoKO=a)h3'd9phsLTIjj@M)#uB3/3PWp_:?8N4$IfRPEAmC+rJ&X2[^np,O$JnK?;=fF8asPYQp@7eJ*@%1?UHW`NodLrIMCD]U_5h!J>A^R1p$@^i0;UL<[l5Ts5do[%b4[Y,iBW.8'!QnN4>!$LA,K)9cgZ._<M?2aYOrC-ad\Wccm0>3Q00%K;[a3M-,@hQ(1]:&a^29['2D#B$6Vq8etL8Qtp6[iq$W;eoF6H""Q'4^T[p^0kr&??>Q`MX9YdtSsA'_Fj,1c2$&WN6JC:'Ja<4)%MdJd=?\87!K4]k5_0`)\-j8[<U!H_/gCp!-A%T1#Ti']Ah;lnh5Fut,D;$1:Gm]UP?lE-A0!F[#DX%YbLq.E\2,M3!lc/1rWAXI0%68WMpiG]Lsi2nahoQbO[E\``;<g)-hIE@VKJu+Z_I9ES2)FOth*+IU9#Oh+kC#W+Ydnn81K4mp<c:>W(HXLHsP;HiRg9*kBO<J&e%EfG(F1[-cOp-i\`O^Tu6Q#:_7Y]9DGe!T&"Zjis9;VbTHGj1>bfhjgh(a27]3-5Z7hgp-'%S$J]ahshefuI^NZtF[g#eQ()m*fOV%^T:i_Ie:?a+C$k;P.UBS.aS?pc)-sk0P-Hn7%O@FO>Ne[/.,#g[gts'[fd^?W"'(Q%`Lnrs+`s=EX(97N5dcs,mBbdgr!l9pk+LA%.Z87CQ=1CY9!`=XAQbPYA#4t77:?pG(M+J_?'Jrp2Il:R0i#b%BQ-AAZ<>08rCO*H*KJt]ICmH^KFJp0JIsqfgQKN8"rn9kSN[a!%,`S4TrsWB^,=<Z<N*4752lmD0adc#%JD$0^lBcXO6u^PUGi!8&823QD)iq+J-Gg)>>[+o!G5P5g31,(c,9)<R534%n@2X@VQYDGg%gdW/NP0R6s@a1VJ&>"CS[CsiBhU8@o(IDo\iLkXLeoWUX8aBKIeJ9b$f)7-DYn1nZENQ_7?o-X31ca*43uNH+D`LW`hJRS`ZIHD7%kXnHONob)c03W&AD>gmd:f=1@+5<J'b"Oj%edoon'91DKc_1d+<_g9N8E$LZ+B&KARhF1*j(VF0Q'm:0N2nK--$='->I/s>O):#n%o[2#Ji[e4]#^Cdp10kq=DIYGsXVogZB;:G`4?!+O8@ar(S'kn8'sL,tQ-5&-JokVJK*T;[NJKk-N,=;E$FH`&==Xj2m2%Hff$f)k%'gj+?)u[M1MlF2DjHY=U%;0"n1'`e"nB;$(GSet1"i5$#&]fl.V-Y0"I[:7gpZZ*N\KE`d*;jA8#tdp4'4t)T%5+Ofc-+C[5M&oc%H8V-0;KMJVh!);=@Du)IJSHg5-oFd*rB]aj2!@N^nCeCRO5ZM<F7u_qf7%$8-oOi%"]o^2)epk/.Xdp&jgbGCk=:`N#G^`,>J\st%g(biIbfpW^<b:kC]VjmRHNObH&$a[h[3Um(FHL#b#2P<FI3rd.)^ilKn+.]qi2!GVeiZh&('caq%%,=$N/CqaN.Z>0.>s'7_WCon%39[i.H@OS%(-Ct*4$1,R<TXW:g)F\JFN8HPia]G]'i3jPa=5BRK\iqK>Ku!?'P#]O/l!2mj=\#%4bQG;i^BZF2fS?pR.+RL.-N3g%=l]"3ja2KjIt((=n$qm(:48n`##KW.?G)7P5*dGa8eomQ53BO!P:#6ehq7D6e2r=tncAk<U_d\^];Ei$1cg%IoO'_;GbHq$C*-t^%mpprCZm9RFS<,S?h8XATho?kn:5^<?4DfKjG_c51Z1_nVd,+UQ8YBsJ#ObjjS[!Cms2Oi0Qoi0?VH]h@d(uTUb_:)clF\UL-]NSe%0s][Y'*JBi>i9YS2qs@/[pPrB`^E_nI($:=.)<aE'2e(M;)f>$,gLhoN*spO7^(#MO;]8OQH.YF#P.k8_ZWfW>Hf]F;$#mJ`@\T%%es[2h-,Q$X0lgdP;%CK*frs'/,g51+UJC7lX]`q<nT+1f>@XK>L&u.DZshMGF9Ot?dC^RW@7Lfcqeb?c@(AJ/rRYpmW2I;REj%c\%A]-jgBu4W]=lO;;h.tB&-'Gdr$H^-@$uMNiHO#an\g1\`\sJk1/%ma!-osH4\\=8l5;-eME!gWL1Z1M)H6RO*JqDI>Pcchfm^eNA%R*Da,GJIZt84/q/RU\nhW_gO@W9T*e5g"ZMFlP.>'R&gQTIm?kG@70I%6Em\d9!CrgU$1G(=K4DYf'tsa@eX-<o/,CnCT+e''HHV%LPM:.8\ud2XbQS5Ds?cj>r0dF_l)J_roZ\fDaIpr1+0(T0%Fn$`O<:+1F\RFZdnNuqUKJYoZfVfWGdL[mT&Q$[l(f-q'&-On+$9!%V[o:N3%8sZq!MXRoTJh]K9qG"0KoXW9&GL(o=$lfO:a:JVc<,!-i-j]V!gaTXhEh2Ff@>=m5=ajmbLsNn90,GcUS2)E;@5Xp>GJ]%C\amgHnDa5XPE.i*Y.1nSMAVXl>a5@Mk\qi3JES(L^S*231bI:(#Q(,I/3BcS(l(\3UrpSpLHB)$0-anr"M-]Kr[Fb0U=tnMts+!%qffbf-Hc-.T3jOkB]1[s6OU+c915rP>Cd=HJ*"d+p9M)c0>i=[^6bsbYdLr@dYa-3.=K7rj%NJ*?a%/[cYAe^Da'IhaL9-5UL2j$%0c*Vje"2t>1KFI-G]4N+5W-:%$lgX-oMQ)<Gl0;d,Vonu<IL@j7$(.WK<+=P<N!$qQhomQ7Amb9ae-qAdlR0sR;QA1:D['&f%.IX%plg!$420nJqVC1cH)I"@>9<fNY5!BT2V.A@/$WU3Bki(pmcc9:hJ)!>M5q=gk?=c;(9Q?!b#`2M05b-aFim_@>;aT!2hf1[frEN0%a3RbdUIXp\<dnq?i_@l4'bc4f=l&B)jA%A:[L@4,Npbo!Uf/DWAf58U2lk9"QdQm?E,]u$'/,26lo&V8l*,>Afr<#a3od[#[;PZ.%[RRG<rkZ7rZZ9aX-T+%ElZBd'/6&uO@:&T%ZnM(I-hC(H_8l%gp\)h<e$VdmC"XrZ9BGrS?np6^\j)TSmTXf0=Q_/dRiCroWuJ[?%-dq00l."`PP#Cs.F(^3bg1JhNP@q<$larlq1i'qtej3i*SV@QDHMlg2>.pi8eb%5@l,ho;MqmQ,1gh/73Z3i=R<P*E.W?cKb;AGt%C!89^_mO4@jKXt)mI\%AeLWdFNr9A2At=8Gd-YnA]0?%YRZ2I&FtCA!<%@c/dnXfk4,9,m?D"*4hFOOcs6Nj[9ACQ^RPjR+,eAHR%Y(sG[42$!s*Lh0Y4;kcE$V9ra"bN@B\bkT>_4oD!q#2Bl.[kPW'Y/K8S`9W(44^UCS!/FmVnZ-b9B.U?hW`^1k<%ikM\nL/?:_Q/%Y7GbK":q=,^kYpfVqbMPUh&=rjd'8#Qs:\Yr+9FZNR"9aEi2VdBNR+MCoAo5:)du4Wd^kfNM^0I_bMF[VpGh=p3\ggo3-T&J51;Y%`gnG8G`9_7IV2$&:AsY-C[\&tU%$,FlIj&i=$Cs8DMd1=B3F1r<7tuC'B?0[b?m!Xl$f9Fd<1oUghMUUSg847MT;MklpYN?;Kt-A%p5GQ^B0/i`f6/6O2<a\RBB[hm'[Ar):32aV_aqNH]B*rT_a(^.[jNPL"N,9YqAbUa9pX!?@;F<_$+YN6ipCj:-an@hmB(gR9*A\N%lm3tLg54_nLuG^NnJ7pYo$2NK^=@/FKYoq>E[M*d5i0gBpnrQ.jD$nfoet-e[#\-dDi<DMmlj*Ohs>cZ4)Z-G=hUqYf>[38`S9P]%GC?sge(tusp)N+1%Sd+,[?KCJmjD`HG/qX_VS9G8er2!.\@Yu&/q%YCBF0dOmQRBB<c:dDqi,FKlKoI5T.1WlN6T)Oi1ANK033#+%\<huKON#s]C$t*K4efVI@-gs\HbJ5NX_Jqsoi+(in[:X@A"hqYfis'57Y&h!$)\QHS*PH1o<i'#p6n4[>W]69gD]Qoha5?rA*kE=%piX5`r\jT+^Y.J34INr!`YZ@ki";*M!hdX<C3kgFj1I$G44p=sNP&&SFF?6-UG)5JM;YT,Npq%&p6K);p_)H:mThR9Mp]mO@OuD%%&rsCZ%('riKu*PCEj*14Tq>3,b.ja(V.qn,mIPdf*u)gK<%6:WV5MJr:$JXi'8'q&V-&P]MT%p[3"-P*LN:?mIi"djBn&h&lf&[W%8#`e847#/;qgSH"e)(3InmP/?*FQ&=40$lF*q/GRK<PF/b+S1`/p,<`ZmKVV?:5N>kPUQQenh6UOC1HT*T'-JQL-O!pgDqB>,<7K%m$+R+'J=P*52.Xp`oioAL/k-i2P!mD=f0[Ak2s8+.EqcN(ETX5M?X22*^3B.PtnAc*I?<=Co<-U%B\+,oSnprp3h@uK\@t<"`4lo%LL927-6Ad24%3krdM"1P8ot<]:/Q4K>BME0S^Op\_337"jb%]R.$7W+(Zgdj=f5e15$lOYl?Y',G>GrpFImPVDVItter+7a`30hU%/LH&cZlJ0C_F[@<iM$]]Z!H]rVP'o,4Vq\pDd4$5r(!05183EZ5N!cqHpmpXAlX944uCd4Q>b_G2K?]<h"E?Y#7)Bno%+*tCVoM#%P(#Xk_!/LE"_bT;$_SrBhH5p%0ni1>mE9=LH@#ZW2uW;;j+3?%%5p6qr*87)0B4N<>R'-"Z6+FE5N0;sl%!5ub5;T.ej]WR=O\LU%`I&j..@'i+!<fsZ*?%1PomHn+>0%C+J>O<[+#6$Z^#i4IMadG@6b.#e1IF5!ON0k5EmsPapmfA0(rJR>%PnAgp8QO=eYaPoGcD9/%j!-=o9N::&>9M,^r,%2uoVpQb/<OMm=MuerbEQg1ma]A:Js=7BaFpk/GCJq!)9cl@2^;4C?KT0g2]$+'D&9P&#=]7Dbcm\ZaACK>%3dNm=,?oNeZVe_N<1,(4OEIWP\4NXI*-[I+M.'E0^dE?.q2fSdN34M;/-!3P=g;hE<CmoIPG.C8a!]%=NS7gl?(dXM/n1;s_r/he%*66TfT&lp7=NJN0*L/X'Ik>`iq"oNV!ND:l[%lM'6uri:4l/$:lFL[Z`Qcb]Hf]X2WE\i>S2@d9bESc"ZD-lW2V&kohjDB_j+gST%e#g6Zn2(*U1P)rc#,jn7m@2F5IC]TfhJ#C>8c]=*BN0YOC#R]n3gG,##+jPoB3-jI:X92eNC=0T)'g!#YiWUVW,V4EfWtatSmRpX%@<PS4p`U<FBs.flG@kC3CYc9;(tA^U5'4IDo>lmEr)Se^e[R1[Zg7-Cc>U>;2`A*Zb=GFogAfIpS<1/5%(H:/-p2(%XS,7$*]G;!%GBVdT,]2hRq*Rc_T#'k)>JXe)mJJ,efo'sTf4V_<8WESK=]7_CRCf^Wl#&,`(iD@gR!qD*@ZW;@mor!e/&I[=<4<FYhK+7GQ!qnP%dH2CDCtI,%0U'0lKAn?p*aZl[9?.%W7u_?VF;K!t--S=3)P57(>_puQ^SS"3"8Z>.af6V0b<YlJ*_"c3R>#$=gt4eS0uK!N,<KCJ%%^jW=)d-&?m*oOJPm+4n=>C&&^"@n1!odO%d/tS.iY3(30&R'J_$lDCg!TmK%a3_-)<QBI)9/mL:%lS=qji^Y8<,Ma'/q'V\OKPa%qD<g__"2[S>bFr;hgpJY6[0LCIF^04)>gXA+CBn!@YY#Ja2-1*5Y]grAcP)+;#G9D%,gHuMuhSrqj-93KX^+&fKm^Z"mE`o<j86#%$V>e3:muY,I&QO7=TqZNRP%/%f&J\hHn9A[d!;Y+Ic`t_m+Gs-X>uWW%C4%VGI^f#,"o\h@g"(5!q..D$_1D&/[TCcl]Sc?>?c0W%ODHB^&p$D**SKY%F-pL#P'LdjE3bQbRq,r@r0H$_kh7]"1R%Hk`;R<;e+q6-XE@LtaSp/%g3o!SQb.fW5g#M649IA,WQo[Zfj/Ed%5FUjtq>tg^6qbtMen8Ls3fRI,*G^!2_[75$3R"3g-VT.@Ftk_-dc18.hh<eInf#+5Xb>rtn^9<OJ-JfMD;fIb#p1+q5s7Y]r,Z\-%_diX7\Cc,\^YK@1i(A075!1`@I`s7%CMPb_j?EOVk@Qu*:Ipms'$E%\A&E2^gL')0N+&J;AH9kB8']%aC"<\SH<Jg=+0pu>WMHm)%IBRQD?52n2#gWS'k3b6/fS=6WJR@tqU3b4nhsEOI*'n%DcLt9pCTE;(!KA\@p_[1f7DlasagSR6ZPEtZV0M'22XQ0`>re^GYfFMA%Fs?X^Ghf_@S^7#5htNLdT/7<fU+s>a4;cT/9oW@@gh:=/9:dh&;u5m9E#>omk[M.i\82Y'XNpSlKEsu=@!WGs,C\o;RS(]m]%[;:%,oJOY1jG<B$?C3-1hL'3=2E;P#%eiLYJ%O0B[GBo*6mNQ<i*%*'l^PM\%%$tNsG1bSB077TCmZ#',mmcOETFK&8,ZMRE'\fYG@`!%V-4u@*/&MN)Id7YFVgO8ZET=NN'04$44VG$ZD3cOh17U_aQV+WceM3Io)WY>?6"tFUiC%hm,?4nP=>Gh'q;nCQg3t+XPrL\)dCbf%Jb\IHFD:^,X39U`Z_hq]EaT4i1ktDA0A;o(@Q56.\/f49g>f%N-iZ.fO^,Bh8Rj9W<H#^^>7G@pTu+hgCF;=sOmhb`p;2)451Hk"%[q;TT7?b_,POHbbo(\R/%H$uhj=5>X`nKZLFtm[NNUZ3AbmHRh8371rl?#mn8iutK]:mc.7;_G6oBq@3r^USo_H\4\a^`N]L&f<d%`85XZ1[@SA3W<96\""'O.^]FoIJO/j_J3o;Zmf87cCEe:lE637f=$O>[11,R$gN@#PRMVYk?_)p@*B,ce$[SDjhdS6!0S:Yn@7>B%KYkW:e=`V^GYU6QP:\_j7lr$ANTZa*hZq4d/Ig)g<4Z1:`L+.bDd.&%@;B<G(]2Z#Churm2Sn&+g?(LA7bD<"Fj@JI2H\\#`F<bG%m@8)tMI90mCk;Fo.71T=<Fr:O>eErn-"hK5khRfQT@N@8UL%,B:Wo$i`kcHPB()I1+$o)[Y9o"L5(_)??VLs"I0:S$;e6+eFS6;g%qIm^aA*E8(k[;**,_jT.Jo2o=E5<APqZo6q]42R1FS6;g1XUd^`mEC/d&F9g9?,?38'iuZpeihg1-&Q,crjRDk)5q>O.^"MagM]$%2IUOLXtBo#Gj@nn+%nc4"\>*U$:$U3DP%DDKa6m;9^(T4f9'?Cnt/R$h:BG&i6'JpYr.k$\b4I'NiY#l/WM2GP`<traJ8+lN65]F%%-G\SDjHhcoG;2bM)\e%:QCoSf"TOqcL(C3OJ^'(m&K"uB3p\Pa@@W$Pms<)6KZ?LZ;],?4+_l4>IoFM4bk$ZW6Qt0D?j5SUW-AA%`b]H.R\nKdHDrn5mFSpR]=Ogd,R1m*3ePXj(rT60>^FRrH84'sNPWfu*:.8ho=I,(GV.stLp]%[N$;`/L&d79ij4Hu\8u/+(Tb<I%0JEbEp86hpG]H`M3iu]rV0Bqg#CrhdE1q@c@Tq13T?<?6fBpri.G1+]bWJmA%#67q7eC;U.O(a+&185UZ"d?WFuIAh0Ol*[`(?J<%*QRn8Fmss+*=$1'Hg-Y-degga"!q(S_70t,U_`a*SIbYoPt?e/p&$iI^q5Zfo?T:Dp2PHa$g,=E5UcHR+i%\"b.9Al0k\f`k%W$_%hI\s1=eB"OJ2(hhs1&@`/r)0piKmk)WH53AW*.:.X9IH`QE<.Pm=rjE_&0e\A%\=#'5Rad%#9[e,cdDY>hpL0\Wf6P]A7RPF\h]O%=19A8>;a2!$(0W*in23+QufbU7@e'c:3IX-kC/.t:.B&A*m5*Ra5s<gL3ZaeC\r\uJJ^dHi\tb/%Qhc9#F'0h+;<M>_3I5])B#;Z%?cF1O3Rg_q8qsHh0!g7!GarWhOIkc?7mo@o(p;u*YJ^0;]S/HPGhQC3Sd`UZ'+Z:rGd9-o(eDHfEeWIYo3#V*5U&:q_d,`$]!M[`%C,&rZ@Q&J"b9CH\SZ[^d/VYXd7:qlkJ?$Ar"%/5P@?Kdp)([P$Gc?N=\\Q3i()]GKVJ=#rat,<]UD8"b_9`eqH[XN+.L^/sM[YFX%4IRni_hVZ6U*\p*&ZLf\Gmdhe1^cFckKOU1@hY@7\1n-L=Ac@S08]J*YWP&!$d5Drj)0P3j8$C@9fPi7d_X,]XeI!,hkmlam4`T!%FcKaPc?``KT`pbm+!^Z@c-9\bj6H"!%F_$T*TQFNLk1dJ5)cO`j)X,r=(`R@@Z2"EFqDLJ3pTG=bZCuC[PYMZ!KZ"kSts4Z#@]CA%kfi[cL[.s\_cb[g<uV\5o)>m?j5C]QJj(Ar0cIBYLRZa[Fhr=4)8A?J&\%%M\>>o'?$dG=2hG3;ENLK-:5qcp7Du/UB1;?0`""R:%&\%%M37D(5<ZVe70o^un8N`M?(UH0RWSS)MNi^:g/aa<+k1V0q)RF#s3n_r8:F%c/IA/NQGBtZemH2h-gK::Vf:J)LmEAgN1&hP5%Bh,?h0+&0.=fe><CVAEZ"7PIDCju\oI5le:1#k#?s4RhuQXT\kd2mkiB<-@'![_CPAb`tsF(`Y>NRR<$PIH!GXW/?'ZZJpuZI'KE%DL(</B(rG;<ePY*RbN?a478H/V=mO8=ah7FRH`/khfV<?E>'A<#klghk&0==)5l5dXKBo=(]3k]j26]!9N:;f'l&[m\f*6Ja6m"H%Oa=dbLt)<%7&9hY=\2"2^D:*H6n5RMJr!BBAJGfVfZkrj;DEXFh)3RAd;(e4&hX`b92k"s1'70B/OHS+qIhb0cn#lkiFDIKlc]qJ%Vb+*.p;*#I_Qaq^=eP(S.,:>990L:"7hIcGQ)b4F,O<<pVd3.JS8;2E&S\gM-lc_=F6@]OqkoE]BQ590ooAr`FHDkOY)\dfB!)nU%pd-jVfT5:eO3s]c_LRT)9jDMqY%3nij!DSN*\QAEU5,b,,94>MH'+B4D72R"#Z\I?gE)`l3l>7\0&9Z1l_qHZBHheSh!JOu+.N3k%E4(hJgu-dJOI&]r<I!=93o9"IOj_dn066f5m>KKa1r1!>af"Y*"dU_9U;upP(Ou3TbM1G4i0smQYrM!#h#]M!i\'5\+V-4FG;e=3%(pM+\otbNsk/Pr\7Bg"cQX,:#>3.VVfdTLnD:*'4>o+8fN3IZ:NNfJ[P1H15;Jig?@k<ohlHGWVn&6UVm.0(ll-p:2L8h%%3[OUs%%dl\OWt;L*]3r)YcE^BOnkufPYk*@bn![:J2JbFVE]M<<0d#;ndCR;!;sV/)l`"*H=@-B5DPW&WH4)jZ.PB@%!J#Pr@e$=4_sEkZ%4("?@bMg^cV!mn\T8OITe+u"=;o(37#boJYKt<BHfhU4FA36X1g#^d-_-UsOZkFX/hk.0P/f`S$1c%5<Slmbe9C"]@#PM4V)aUe#%*k^-IbgGE&</g>hZZ8T>,a4`9806AP?KY"&DQRjo>AL:UP@9r)p?S1mM4CmeDXeum0#jgOI</"=ic]^HcJa*LA=#i2bVN]2akWoS%,(H,0OA6G'Cbn_Q]=T\WJBl*]]4<ahHTTG,d<']^S]9+B0Xd-X3jYN*g_b1"2E?uoZI3EtV'@'f7FR[XigCg47F?3hSm.Y#Hr\R9%/oM"u17E*P*I70g3ob<k/=d`\omG//Ap+s>?<8(?B,4-Qj4gnJ1nC%BB]e'U>VmI*=G`l\]iSX9BK@s.#,Lc(8(3lW`9o:ZM5E(e%V)(Y7.u:&Y'2CDXn#E,HbiV^C0X\K*3jVr"KhlqFUZp!kEY2Y=B/H.]``<dJB,4.L'ZNhAl.fcbR:nXf@h`G8ioQs"fEN$gZ0'`I%Wb=H"=?=#<Y;2Ql_?YP/d<+O)l`-`EbV4W1nnOrabkIH(8(3kL""8H6d<'!AYdr^h59SS*FCl_r4s(lFJ4hAB\Zo!4V"qu1'M,-#%!0)6tbRsX22YM=FR\Q'!<g'YHJn-B;X<:l@)1=!4U6^%Eb\V'S-e8qDo>3M*i9j.O1(PrMp$;l2qc%^(+B`9BZUdDE2b46fC"t#+%*4*s03/e;CW<HD$WXm2k7bl(6a7U@uO\m?lofmJ,R3QG6QM-&RQ0(iP;oN&g?T-0"5.d=RU:[sjAsVT),_)Xh+PdBBcSeL>2ueC:%2I4KW1U^^ao;9&S[jW.-h,trAD43OFPjHBtd6>gGFmPTu_^!eMem46fiL[+1'ujAbO&tD:"@HBZ/C1RO?]8.ae42[b/q%g:*a6KD%qMcQ@1O>n05e8t(J'I[ZN1mS$ic(O!cT*K"SJ)lM-gceS?"V^rbUUaPM<AcOF#k+)e,8cf>su+p3*:slH:&:4IoY?%,l3"))?Y@?%[eL:$L"\hKZ<e;`a"F5iCW5=XBP6bgY%FfoXanTt5RNKV,eFsDm)Iii)k/dj<qRCj$`s;i!],D8?]r<0P,3#4k#O``b`sa?-LC%k%$5n7,SG+X/<*o=d;/)Kfe^fNPDY?U;T@nNecYDI*TaXE:Oi8MCDHE1@n91'7$uar+1>&f/]>9)UW`_Y-Itp2dV8WbhNdW%&X4(h;%cLSFIcut`"<_\e+RAAD3[3Tsi%*Sd@-]l1?KGS1&fjtH8jp>S&[_U?3G:NscJjjA=&`J0V3b5ai.rY*t)=D)\+.$>h-5l4ecBL7h%4HWpH]N)mk7Z=gH/_Z5C%!Sjjj%F$pS'C]-cZ,l$im$_$@2&UHJr/F;ls`HH%'8RB>fFR[@Lg\AARI+)[WIgW`4!%XP/p/6bApkC%F%+eccC.2jLq$e`@-tY(UQ\OkF)K#I^>1>rM2=n\Us$)&[*Ki47*bRdc8?FiF_eaC\I;rIO)3i,/]*mV;#+K@`5MGg\-ZYs:7IQk%_5u11o6Go,5$bZ+\dDp#gAQ3&.U==YHEc#WkL(mHUBQ:;FS7H5SnK4c1l#HE+K=)(R8m\p(t[ooM(<kK$AOkU2S"`c/NgD<<YNZ\%!r9P<V]E;b>JSS1;BBV6=-i7dRSqDN[MD:j0s8d+MlWg^atUf%)tTlK9R..kpNIufXNsDC/^Gp3ff@%e5]TF.N-3W\HdL@4?LkIA%g7LJ4-f`TFQu'heH:QXYN:"6nNrrb!'g)!]0sIiPUAJEZ8TmIl]M/KQni'ifg1\_-8*p*%Kr-0IKNshN?0LmaD-FrsNM^VKlQEk0%NppJGER*UBH.]4)lQmUEm*a[;nWo_dQ1qV#*K:s-Yjk6VQ;si"]0'n`CSk#f1^u-.U)_cL,pjh]JDe,5NLi1/6TeW#3X?8C].<))%^G--Mb?;g`V:IT.HGZ^_&>!UGTc01s)(3YJ.RuKghX2pVh3%j(:TGVNQp0u.0b!M]bHfUEpiatrfr=Gu-$l>U;^j6_qrG@I&]*I*%]4WO+>4-OelT:D*XaBt1YN:O\a-+P?RI9-Q&jp2YjUFPS@Z^uh$sP*>V(s&o1F,tAZ;dIgd]1E'&8!YdbAkrWU"71``PTQ(@3Mnt%MJ)6YAI4OiI(qM9CR'%L<J<G5=t2=$aY!l,CX2T4>EYRNDI':oViL%OV)_h^Cnf?EB$/Xj;/$L]R^:LSGo$K>B&TXFp\:KSGn8V_%\Cl.AH2R7624$6@"-VW?,6Z0::Wk%TN88+nCPE8DXDb23?("rPq-(561!c1BV7b`/[!J/?0f$##?sQ8IQ%.WcoGhIO"h;4.;kD%.%)j_J``,U%=]6piPo9$H@^"+G9E*7f?3O:-E\u*s`0s9QUS@"UQb[#5V0)8qcV;>p>T0:qC$9q:-mZ,1A.]_![S)Tlf_^p3#NAa']%QX(L,/Zl*(J1STLpiDki&7YpFb'.H29IjU00[;200KO7):3)g[ON\iVRH7+^*=D"LcbWj@<m>pX3A:[EBE(&/IF!HPBj:nkVl?^\%Q,i"r"k<-jk>4oH8Z?!<9PNj>r^Op!rM:EROXn\)@ua]6At$#_8&iQ=FHq,*jqu;%^+mfpb=+,IQqq?9N7e?0c%HI/8r"#3C;!:T%T\C;KgNuI2UB$iQBe/ZEq4[lF`W.KYIo1Qu],3dq(L'!/cts2a].@Pp3,ol>W1LYk9sS7CT\C;K=&ClAk\qICBZ^'U700uZ!LuqU%[Q8iCNr_AXoiOoYC6S5AB4P4H;SG/c3#uH7m8sS#._'SH=u[t'=[ojM-fq\oA#i>HkA^pW=@H+O.eOh]iM:jEfs4YFPg;+7j\e\G%oH6^=]i@A]&OPGr$4W<mqQUUWB(]BtDQ&u9IZ+!<c(EV68jPF?iS@>DUD;PnjW^n#$U:I&jRok*lKA.a./UZ+Y4%*K.^,I&6hY^k%/XP)8hIR:G=[cX]H\(#&K4ohKIO:1^N8.l[;f\qsCO,mFrL#bub3N\)1rS#ro(oI8",Kl^5PkI1]@aE7rR??Zdr<ucj"':frkW8q%ZS@:EKcc]f+#W=fjFh^\H2UG7Dj[VTb=/8<2%)M'5ijW%T=q8*GsO*Mf2'AoUDNPXH2Zl`H!`D3T1LPA-Z1qo?9e<fX>TPDo(q#\%W6g@M($,$d6r!9SIajt%ROBoVXFBFt,YR:mZTj=8m<'.hrTkQ-l)IuPYFhB'p"]Vopf<O/c[O(ZpMg_,?!]bmK.`?id=q/f)4g!a%=oFZ.a6,WXY^J^LV/PmcZhgdN+.n`.mj=L@9jU'],@]6YG+$!lAoS>b<^0kC9B>cp/]4!XIZ$[l3<Vej(*UeeZ\#i=:,c"O-Ej'?%(!C[[j'+KE[iljNo#oB:X5AO)pu^)&9lFs;c0I;i._aT;Ib'gc3H*EPc0Ap\q)ClN^Qh3`/Lfg91q$@i5PqO2$f0NIP1OUa>Mo@(%r@D.reuVm4j)Yuf>ik!M3Z+IF&/)C-_jrICaZQW]4Em^Xjn3+-X%_k`Fr'juo(nc4!UMGIMS+E3W$J^aK"QON`luqUPC)9D`&u<*%opaEJWQ1Cl]REV%j_FA_g$Z1fH4O3Bos5GC=['8f?9`eQE:tPsZ+PNdW2*Sp/5Jatbj/o6eW9-`bNJQ)pBS-_Y+7YXT/FVB;S`)Z%a^&4;qZ@gJFR>fJrTlIuR4->aoD2U+%MCp;2"VtdClU[>IDPam;ek$7^Wj_,L0`RbDf[h[g"u8U&@SN!NYlLh/:"FPagig7b?eiP%$MR[KO>$\m"KJ`X0?X&h$t=7b\l9Z/p9$F]n]B(=a.MNNpXd:5hHGaM_K`(apu\;*o(dch2go?Fnnl(k5(0]lYC(SAmjB(2ftMb@%hfQR;>e0bIkK7/Z**5/7/9-q@kCfmBAu"/'iE;^5l+MRck?[<c0QqjoB"=DKc5h*jrd<ns\4N%!Hek65pX-SQpCt.IE\G\FF7/_o%iLR#VM%f;OI+[H8:'6iXdAS$,NIMDG7oR-O2k&;RJalce'*Wug#tB)U76BlTB]?G+m/+WTbL;5"[-<(MfZ7lQ$iZ(MlI"bW[sr6H%)a=_3G?b'a7!A17q=RS<#q;Qu^1h,F3-ulK6Gq[NQ(&^W[ir0<fu65:+?E0!4>.toF?IQndM#upn<dT]5g"?TEs2q^jV!*&kn!Ns%o,8U.cD"`&;NK^_XGPk&GXpOMi$sH@!`sYc*HBX$Zefs*2:]Xd<M/((hG6/ERlPiXig%(c@hLH*nm/h%P5K=iF"*j8`IMdsdab4T%ciQAThT?7$gO30d9K%=8S[3u&)W/-DLte*5n(T7%ik@tQhuKAjq8/J6B,Gl?L+i7KdCe-*78=q>^<k1eN3r,=O_MB^7G]VLO`,.,%Td%6Wlnm]aNiIQ4IGu3.af1MYdgTA4f0_amnZ`>VmXBsqcc*ZN@\gHBOmPk&/eEr)T?%]Ko!^8$">sp[R]c71lR.WU_t),Y+GrCY%j<q,/PD%]oE.LTkp&1*9ilOP?h]&)Eo>gV"0>I`<=W,T"FAR>#NaQcabe.V*'R,fY`@.f[op&?u]%pFo*QGK'+FAOtPo&VrqVi5:%bhqOAe_Q>\N:"/ZN0"k&$[K_`>s4,I^*=fRb'o&<Sb8ZF1B*`ZM^tCs'_cNonFPX)CV*>07!Mah@$)#AfM[:i&nHY5&t<j'!JY\+%;gWL*8'>q+CqT9/Q8BPTP7t]U(?;=Eh]gRa!VESaXQ/%hF:dbXn]-ilg?G*Tb?H=+Q[/^lQ/[doc.kg=laF)t:4+cIPHr^'_^2@n%.b^r/qjq=5Q79:Vet-[sGMAk/<Cr+bUWd:-;lq$U8N3K`[[`d!7eOP1qSb/siDRTYp%U%gg>S_:m+0d"np5*te=eg'nnOad&Od9s%C:Xp?DrWV+2]k#nH#aaTDpLP2H/m.N@4usU^g&`9GghfQ]q$9?aA_ta79YY5%30g\`9#_1c^aRn<MQuLm%5YP1,Rm*Oa6K^'C.?<%HLU`4GWYloPHj=qg*4/:!nFSm7ca]sC^)j-1)f4#48A1K5P?P0M>Re.c.S%195f1k#9Ju7(>&oRiLW[cZJLFME?-7E,-2+>8]MgF%8WGVNmba?MA@T]c@`UA-1nCO$r^KEC>"E6Sr*!>R7A%K52g-Fglm%9/I^&=K(dg%AJa2Uk&X9-^A0l,2JcYkG&0tFW'QXV#L-u#A%"^'?,5Yg8R\Iao"ecU<q[J`cajs)6^jE&A+cN,!@NL,ZK"rn>\`)s1+rU(H4C]+S^h)P=3R.+7?9Fd=NW[DR:1-Q[NocT4bH\s<t%%BK1&8?Q-Q;Wb9mHhHEj+sql2)+CL<$:7u3!ZtLU6Kuk;MjpF,8\>_i/IA8O_j@TreeQ-UG)<@7]a7dh`I+Rm^2oSAfsA0j1@OO[%-EZN.Go2=_h@"Q"R,6e;l)eHG+in.Ta*c.H+eg`2.oYj'j0_"?HAg#(Ulu>tRF+$Vb#?+9kF3R,!YMh7"FA=O\M%iXfqWfTi]N:^%b5_t6]?k9W>UG`l`rm/QW63.a][Ij,5Z_FKiti*Vi%qJ0[2=iK'?6[=YQU-JGUJp6kDm:Q%q`rjj3t7N9%Dpla&a*ll6OD?rMb\D%(.p$LUX203-PHK;H<#jT1;a59+W*orccU)4V>X`Ue-sY_%ghbO+9"I'^i6J:5XFcSchN[6"7GBHH+3Dk>>=W@^f^S"><nGV.fO8F%[;"'aHE!%lDZU_!.3ReC:#*Crb`K*4Au$d);;G>?jLHc1Xc6a(@E8MaM`W]8F-&2g([`a1P+7TCpJYE20Uk*+Wm'R4\A/FcOGh8@%%S&\"[];lnc4I7>-RU)R!N?m]-/iDJaB3UXDf!nkp.KMmgV8\s%fAD9.ojf,e:]c6XHoH"e?kVTo:[ShE[H4lE\!q51MY>h]tGf-%qYG0H=)VI;a<!@7kr-ho:RIb;)Q:bk\ROgfW-P[#":om)JG1J_[HOj3*=$Hip@MlRYrWBT1pt_O]X(\mk9EEFJpT.fP_HTQZSU8u%D`=rNEjaiT$@J+'5N!csLDW]9=$Xc1j]f.a\m](0ljPCQMY`0h,QNS^U:C#BRAQm#922OHM'[0$NsVNHj79Dr4I#$$>4[T9N@72N%:GP%8cstpWd0hh&ls?%5>he-hNCLN3SJk3200@5(<(mW,`LCIk4aePNf7-]I;l,=0^TiW0oAU!SrQLM)qS(3%iJ8Wbo$"T?fMd_R%j'1n/+sJJ0oUL0=@%0[s.`NgR_e6*.CYFGX)EUMg&Ws(5Q26dXlkRqs-O5/G4uhojiB&GPD>](.;q/b'+>Gg=iUYel%>Dn^,KN_"%*610ibOK$6C7ikhIAd2<*3RZcYYa4)00K5A@/md\R-HqV%ENa'D>13_/"lAiVX0a\LUfQ85hBW9L/On4beSjL&2+^GON0R('crt^%]28&Sd+l/-"fc%+$LmO>h:a!>YR/=H50Xr)98oK%'g#+Y!FMpDd-,jJBMr2pKEI?&Jq(i8VB@#of8tO0HlH#2;A>A8f.%,V&JW<q%Bna$ocfZbj*qW!ZQm':r!qG2(&<Kc9fK[u]+?(XFU=<08Mm5h#.Bu6l]X[a3YtY%Ki3A/kg.Q8LlW0b_Z<h&e)!F6?^R9$r&Z<si%AL%O[Su%(jq5G)LCnYUL7ERnLGg2[;.G6Vqd%Y"P87Su#:^9+L9pdh(S;1))j1NUH,36q.kCLJ02`/@6j?gbW#@71;9ekdV(s$i/%o>A@_r[jS]C^HiAUe64n2baE3\hmXIp1p/_a8qSZkA>f-^f'9'*%&JL-/4)WM?jbX=HtKjRp]YY2PF!Ej`HZ!Npj^17*':_Jt^@V%#Wk;M;Sh!p9k[L?K*PKr*kuh2.U@)&dWJL%_m$<t(Y"8%X5"Cg=P::r.?+L:d?r1WK(b^1V(p^O/836ZSHi:9>AV7`?#VtEMgZ6I%N@csqQGs[[L)#[c@:3cm#_e0WfsauXFX]6lN*l5eK_.@s,+&XM<9XGggg=ZeYigEe?sorH.)K^h[[E,:)lhDo/`Vj2>'<CG$&(nK%OSS]-aW3*_AOtUt'p#=G=8J*>ZLO5D>ne,E@l%?u_+3HaJ+;rcm\eZD8fcH20.I2'URl;+YLJ3s^p((e6l9!-.:P,47n%nh$7bnt%br.Qu,H'os[_2L":Yo[@_orEN^=AHsK4_3!C1H/E<f*3Rfcs4;ekcDS<[dWU7l[34X:H[#8+Poh,_3o?onbf(,Yp>uYjTk23Ddk*%(8"7?LV@QfC:?)>mHlf)qr-k1;R,r]KtUE=/qI0SK4"(M=qH:P-bBZO2D3cOEcSE.<F;=Q+8P6e7]616^>SLbMHBJ\2pCtWI6E[Q%(D]6:@PiSZ#>!B+fs)[R+u0-/gq#O@U@Ea6]g*:X$8`&cAXst5ifT`Je+4QU`jWpKUFtSXba.Tu@UiLq=<@gA=`W^N'V<5]+U0d6%B=81LGA"p%0'SKUn<KC7$==dr#LMeW!?p+@<XBk'q0e4kXfK=L)Os/(qa)b.<TW(5\'fq9csU&\\9=%b%eHW;)uZ.=&T,),Ps\RY%Sj)/eir]c9Vls,u:-FFmnL,+?ls1?Z\'nd>K9i>*4oh$DBROC:%trXjr"JR*m4+6oPJH4[d;&\DhFSdT#c6eW2L"eA]*e_p30eJ7%mSj3sS"mG#_H4\S]<c""Z&Oh"D3aqJ`^^@6Y`aD"E2*ESg-7mX<#X?``hAba43eBB/Zp,(HBaKU`nsu=!m0\23i!4;S=i_[5j)3,%%Lm&5H?:gAHpfT7rdHofnb^mpq)(68$C42fS2##s,s+KT1IP.N._P.X+ENHrn$%1Ga]Aj7.;7o)*-iXMoYhq*eD$r9UaM0B`mGN.%G^(9D-84%H;t2.8INL23q\!V/?IZoCR.[78Os&E`og<($-B'24\krMM3Bb?u1&:I+*_*8M.EDDM0l?`2r2JH,>VU`?\_TL&k3b,u%=2ZkUlo'Ee5#n0U3lmPDSrK%+fs+P"_7JSRXB]]HHK"YoqKOB8]0/dRh'UG<l'HQYAr9C9534X#=jS-#J/3nDKu'<J(sYX,dCb?6%VH<as,+DG_aHh$ID1<]LW"*mkBkK30`Ej=jqq,HjcuGLdpW>)!2q&^gLr!.[@BTR9s/9g*pY)Q+rbuYB6n>%F).B!l0%+PnhJ#1*%KR0]i9D0JpHAdq<;9)r11<*XR[m:b?Ii-ME#T`*u9KYk3+`u6MaMBjZa5jcV1J!pCl51eq5%67P,r7u1G[b?u1F6*TAMjRZ]_ag=%2sB5.ib`Y<a=n;U=4&%/'MVkecQ\3O>WHF^:R@P;WLZ1@"*/qZq;M42E&mP%ie`"6nsX34X#9`&jb;W6(=.pu7G.T7o"nW,/0geQ%Wi*'L#+/NI7A4&RPn9#kXt-HUSh:Ad=sX:+nDf%h,Ceh:EsIdK<%ils%Y<MWJ>O5_GEn9Kd+sl$OV]'^.9R%&k>+eg_O[N:k?4X#%B.;O`;9pa)mOUdgUu[dIGF"toB9g?)V.`@ClW5Cf=c.C.hh?c'=!,[5h!%3gN%!*2#\k(A\>'F\:C(9`-Z]T<QD,CbqGnls=c.C(%0"/-+B.;P3N%)X"7K(7r\-nSJJ3Oe=b45q3DacnaJCQfR,9Prs2QdP:Q1DnQe_sV`?rdP\4I"bi!2eiS'q.9'j76q3iFd-8=PYrF%0A"lMFj+^<bK+gr]i:oQBX!.pB.qetrFH.QS\7uMa!N>hf@`f>*rg!93d[jOj'RdNB.qf7Hu't::?@d1H`9an_^KOGZIFtq>Sl)p%jm/WAHY)]?Y'P@t96IgP>fq3310!?rZ'Mhbl@>%!,1kL@FWUQfEh+*sBU%h=Ru'sf)BWq=V<GHUW^H/2[!r?dE4:d1n>h7J(JMZX%<,s\#dsZjR#Mjl\W`p")a>#EU;B:^--$#Qi<!V,-Q0ZGbpLWDHH`9cR(N)gTc<dO"B?aO`Y-XJ[81uKTlg1H/l:%qi>\>_?.3:n#%b&ql**Sq@5\6Of'ZebG/WVXf$Eo!fr-SIe1ePSMR\[5US0@eH0Mrj%]SQ,>H2+Vk';e#G0Yn[3X`-1stYaEr[m==rET'+&ig#]',%ac:]YSEJhj+YR`opp=Y=UJ`2THH?/Or"0s.Fpjc*Au%U@iU.>4]?l-V4)2B0O`4q^g8V@-Wt=\M76@mJY=uI4'^_,(%osn0=c.AD%rsFHA9@;&FG9bn*(f4l(c;_.QXqEG`N>mP_&1kBWaapr>4F_>ogf]MXHDtgSiQb?.KCuN2iQb?.;gkd)E-H<R8)]I1EXo9W$$QGE%a\,V^eTuoeP?fS9"%F+e:dRled13]5,M[-J`-fX-ihU04@MJ7+k1(M#I6Z>J80@RQ4)us^.cJ[^R5bo*=Int/n3<\g;JFqVHpSY8%4?olVf#rrr-d5[5ai(d=o*I3R7jY!3Skk`Y3c]-L]e<ioo*H=*D8kd2KUiRY6ZI@o/?$BAUqqr=iVp.:o*I3R#9)J$k7`o=r`lPM%j#8a*I=<Ybn$cYkE9]20DVdUK&q#>[(]rX)5/T0+m,Y4g\'htl$%`cG7.H@Wq6u@q]h)<D+WS\fgWMK!pb^iAh?$4E83C[8:'g[$%<?W4X.&0?e,6U3E.XWhfiR('%)ZP0qjAA:dJh..i@"(TsRiP1Ir$smuYiKh^2q2I$QN)$(Yb'rF3Yu$r]fCR^Oj4,sPC$G%UiXB6%oTlOBFUCc_$egJ[/)YGY8#GRl![8Wd\#JP2-oc&0bGTaqQc$4La6-L@jZJ!=5.;F_VclSrMKB>5/j"n.%q(Gk2"n%sJpH=h;`[)Y%jD\t#5\GM*>&lWfs(^>/TM_-9EhR.fAF.p:\1-3F!FrQcDDbZo3NmOdjr,>@A[i^C8c43u/)bN--N7Wl=2O'4bkiJ]>R?bGkHjpc%MC[Y+\A'Sk\@U[?g0L8HHnI$M.#.T_bYI?#95.ms+PL4#9:n*8GG1@Ul0R*hH_:iEe5#g]-L@+'E)"SpQf^uf6L$'E:WnH'7ad29%;T"sC6S-Gm.AW[ii4A*E!+$Fjc$&rNQ+81[%(?$M+E5NQKN?EeMTMeW=3^8,+W/r`"6k9T%*&r*[TXTE&WPYU-#ROcNssF[H3T]I%lEr8sCu1,e4nH(g&&rf>i[.Sf`OOMiB^AH<h$3<GYg$7)]`U8m\sri<nZd,-qYBiLRrB!+<qRf+?81S+#)qmY)9\Mnq&Q7kP7U^!%+M"uYEEnl['lsN*QAupL]P&X@H8eL)/+YK_/'>oT^[f<b+&Z2]YSgW?RL<k3=eI?4!,S9lKQ=:?Jtc&8dZe#g@Ugaj^=d%_'@Sh7%YXH@5Ya<-j&;%T3/aVVsUFurB`kR@uYo`RmRt9o.5J5gjH`V+@hfrb-#rU[+EU+&o)3OC$O`.q$[_J)37IDDEMc+C.:K[$6"%Pul%:O.;dFe6NiU)'kI3;t)7e25F4)UR`/bYF@J"eDshBWg\S`&Q\s3^Jd9pBZ*"_#>eZ5ubDT@QJ#/7Y5Z0;ooG:2O09]h&Z(6`2VFX%7CMnL`ES&f1#uY0EfgaP??)6W`QX<PK\2QT.VA`9SqjuNl:9Q6EV)YSb_CEMOM$A7RJtf=D9qS0KA<2HYV3YSCFPHWL_>T1U"Nq3%?lGJIPjorO%,k/:T=X'_.&3&aO@T'[b/k!gP)gap'CiV5KTbFqXHO@iB4@I9IVt\&IAhG>/c_edE;s7ji@EgJ6R2R04GWs/kO9S`%*0+d>*0nS,Olg[o_hflci?*6^r7fm:3od.2(TYpS<[,G_nANl4O,f7^c^_L[kH2tM]Ch"2hHNrKcY6]57pZ_"nFJ4SUH-3WKm6Xk%'1I#QDNstN`^'h%8sWDPprK[@iSNnUYmI?)AMt,]R4sd(_4as84`rucab71tWDlt-W6PIZ!1EA53gM$tOr2_-'Jq<Eh&GJ6`Cq$I%p5Y*frZ.-er/%c.V7,3icj,iJAEBlI1`qmKbM:UJgk)mR\oOg_+W78W5.n<&/0[`f37INSXIk,cnihgF9K:6UUla=L'A'Hq=0HB&%oSqHUf#_K\;8pf@f9g<VEFhC[[2^g?i;URdXP68:X3f+m'0U"L2ii\H;K(If,)p,lJW!j<M6_YX-]CQ^?UKsgJT9Ld-L1,*nM>SU%bhqLYpJgc84GR8-Kn$qi6UqaKDA'#f\"@P`r2PDdQ)2%7,$o&)+'/Yo&(4DJ7A!XhAq*)q/&<8>(8%5'q^:LF2Z:V-$GOuI3t5!Z%IQ6B4?paA*<tYo2_;ub9>`%0,Ul.I:\16/LPV$Bb`AROFC=2@0\K;i23TO[ST4*A'%X?kb08+`If/2V_a/LbAb?*4^\f$&og]u)J%n)9YhKh'c@SlmJ#'"I?`caV>,V7AuT(BU/eVmMOVGDUcj0c0?lg3MeP%";3Xf!CriOVJ)8P*<h<4m@oOV3N-na1mQ\SQe<>H@tX[%Soj[TFKk3;C<Z[_O=/k.2C)YtN0eK<.cnY'UUC\IpPfjA$5"IK@[q[FG75)*nQ!<5/MG"EOm[^!ghYPKUiR:F.b&8$I<+)@L%ZGG%!@Nq\)+0s>HqKSd(_77&Z9Y%71g\!699E]e]QmC<8DjQS-c8@9(hHr?pYfBdOq;6MHo;$Hc'Gc%87s<s8_73mB?1+nS5"-!)sTP'%9Q_,*]%rKQ6_33I@r&)Kg/,iTQ'S;YV%%Rc2X^Qrl3.W>GiO@cWD:4C/7PR,iZf4pH]?5dl?;m%(_BP2l^=`GNd.Q`RHg(reB'_)%m7h^U%!BY6UR$Wqp3bcG<6)\E]^C@i3\Hhm\8qPP\:5Ggc<BPp)gdDVNZ:6ep,]qa)(OZHc%e^P1DfHfZbbqBBd&jYQf.$Q'tuEj%F_/F\KD'%5gqDb@j(H*iVXF[e*K['%f6@o'W@s\VhL'm6kC>43P^W+VT)q)V\;>->d8'!W<HpT056Dd85FajY7g<==s66+)oq=P+%S@qA?O`)So/:9Dnh_b'N=Z,*T[D1)-rc@U(jH`P2*$Nk'DUDi"jSXn)OUE>[+<og!7R<T$(ehaACK/7MrB7`M*FHV!^!3=la7\p$%J>^Q"MO"Htn4c$Kgj:HDYSGa\blc>k\>m\1,=J8HF2.f[;J8p''rBCE%5@SMaoPAM<!XQ\dpE2\&X")"]h=N!1q1C"6-K@\mb2BB%cogibRGree*e#&j"'DM.[mc4^2tJKHKU=uPKsb$rmdmi"-%cCdHkD`TgM)g@77ed)CJ54c0et'O;$O/7G!XcYQk*cSL#>r:V8kn;%6rCYu7<[.-eA$J=Jl?0?#+s"hW+!8Q=2<M(Nq)u*,Th:P_O*Q98*C8Ij0Rr5Es,%DZ90pD0IED0bL:!BB'dI"mE^`40,LP>dShGp%4,Aq:\\d+ckQD`?ntt-S*_GiFIhL$RRW8*L4d>CCO(S^d[l7sh9EGMY?V?7Q:gCMbO3R:EINUaX[6UeG/`!$^>6qU(W28oGj#uTa%$;N-gG0b0qa'Iose8Dh>gC;AKGL[(IA[`VGl0]s(]"HjlH5jr92,kL<PhNds"CDNS.P^;rCT'A+-hi2uoc?Uk/WAbJ]J^7Qo$5_[%+,PROU$VQET"IRXjd_diVB;E\AET-cPmi#H0iZ$:iXnn9LL0+AiT3hpgbF;j-Z4qK\&NgsV-:aVLlre8RjL(&7kP/kd,Jm\'_gPZ%QLM?=h>qd>c6?V$"*C&jKLHQ'7sX[fl,P]ri8Eel-=Hg$72W[6Il^+EMai.KC_4WQ@M,HFMeDW$*u@uq,!8&@Ftu=6P=D-^D2\iZ%HnI2@eUWoLh.X*8r+tg)l:-OTP)i#doPGTMNf3dJ<Ocgs1`kXkYWF/(X&<FH,k'K91#I8k#85*!RJAGoXIbOX8c0?t^\oXfK!:[#%U)IB!G8(BUm/u?e$jF%O4M<_MM1),sM^sFbeFJ@fPo<9rA+%3o")9gIebnSso%eq>SIEbm/js:Mq+c\,58SpbEpf-bq9Ob*lR5?V%]!UM+V*h#ums#+uD?K`&n7qJC-Njsu.],&EEppsP+<TM?OX7VNI!_.i415PY7U+aoLZ%5cnrR(*+7k\?PW+LsW4QPK0s-Pe05cGJ%eWbr3nkQ3<0u[_`bem$0#ALpJqEV1abg;a:l>TuSWL5GB#Stk_"+*FRQmSf#a8r2%7ka<j@O[$Zn#_6@*;Xs@eQdn,R(;=thP*'G%4]UsuD/W;-4(s1ig4'<H8N7u`4@+5:D7U9H;',V0:6=bSE(3^saL=J`87G`@Ze%G,":8:/H:756&8eKPok=O2W-D9bb:q@PPl0#c%9#V]V37-O.?,d`[ANi]5QmU'\:1QIe'M/n5H:'m&pY=:W[IqA18`EHc7?W>Hm=D]hQ=P'4boUQAY/9ITp=m-9")YE,3$)eW^?1=q%BG9cU/V+,I$;.2#=mqp5?`6*a`6HTI4t9+-783qMMLN0fVh6)ROLohef]/!\[s<:*9Q9"m?/G$Ak$fL*''b6VAYIV6$>:)9"$uUR%XRI.nUhuVA=Htn*\%VnAH`(,&)B[#<Q2p$d-%'m;>o2Pks,h's)-K_>^sa8cMX%WO]dMS\T^DH#q),W+X&nI^?T&#eWSj1J`.bCe%R^\a^rUG;F7NaqW/;$2ojJT*"-4cjCkK?sO,1MpgZ*X$kD8YhG#9SiiEQir)/QZlUWt7&g+GQci,/V((jkK'Y)#N<&pK`3`l$>'0%;^;Zm5jW<ccb`@;^h-S<kq'uk)!4Z24]B>91QI8.R%o_pqN>JjO,"b(YI8isVM1I+*`qW<<98->oFr48`FojV70.mi3YNp$0Z+V#%.6#t,HKNcT@3-q-24:N3,ofV?<5du[Z-^2XQQt2AX5]i;jGg-@89FiunRYo%"#5W^H.gr"ah1`f[DTKAXWW+_5/1"o'Xlc-r(ZrW%@KSG;'C(irJpE69r<$1'VjtKOVcRonDnu[Dg7DF,1ha7'lAL<FgbdQd4HY'Li2!DF%naL%[JU"4>;6s@!h-qrAPBCn($sO\R89M*%K1X5`3/CG$&hNAOhi#-rMm3PufNrfjmXU2l0T"2!H(>3HP^!a-`5NTg#%+$t9PIQ+OSrRDYLlMYB4:nqgC5YU+%PCVWOG!MjVSb?%qQ<kHqp)ZnadZ'c0%iA,IJ0&[XaT6/$]L1;e5/%QHR9AZEuhH)3ul[:c*Gn\rr;[Sl"lfLAbhQL,7<ZP-Y,Yar+arN7d$Pl8#Pg8%Gd]d*r#sDDp=k5B8<RkdIjV!XCYG!K'5u/8cX.J!%l;=je/G\?DhN#dg,+Rr-tM")[*iZf[TRq&<kiG9=1aI?4866teEs`"2a8]r%eM(iY/*9>2'NBIREpX7a`Y&.E82EbM*g\[k>d@jpek=Gi0J/&U:[X&[d9u4`^>2b44oY##6+T+5O$@eudr/t#F*jP*`!X?;k&p4U%YZiSA^P*V;C)KC1VP[Lrn74eXQc^#^!^h;'7IFL*^<#R;K.ddQXJs<t[k[dLKeFA%I.[Y)h*#,PJ,'IBT>crh%:UVQ7:_32Ve,@0%;a^/9NSZ>2=[:H"\V-_h@#ME)TRnhV^I)F8>%3YkR*7a>:lLMf`\Fl1>Z5iKn+F@^JB<8CcSWkI*+mCO4,E*`S23a4Fm4W`o.2F8%-4_i[4fBXUPF(OEH4\XR3G82k<jY!KYCODm=Q7jE--^T*S3mT2/>jbsh?npsZ0#FrFsMpTbR,s4UKVoq1aF`>Mj#"&FA@n$0!7/r%7-3C&NB\LuZ`md4<+,f10G[WrcGKoFRPS+$%>"</dVJ?cpmJ.PbFZEUfP[kOB'jmAMmqp,93=aoY-S=hRU(C4CJ35'>+0?]o[#E\%C`?nt+Q)7ZD13bPHBIT2hmY=&2<EAPnu0-X7:F"IGEjH:%;h/E&dGOG-2%5!:c=$*UuCrGdEpO)OfZ<KXeek.FqGUOOj+$TScUat%H$Gdi5[IC\7=tCq->[;3Enf/'D7[.SR;H0_[,p!@,MTZ8BsSdke_@O@BiD9_mVU^H,'<ZFS,>Zm*PQ"MaMR_f+gED;,`raehW[r8%+Lf:e6+2V@Veg#j>hmsbLUAD)JaB/1=fKKK[C*^HWfk5@&7W-;\c`B"Gcam6CJAcr=u'u/io/i?Y;Xc7kY<j`FGVnIk-+\u4">,c%5P'Ec;?V+e,cT6PRKh_"m#-'BqXe?((WjCiO8u<1%-H+,H4)&+<!O[]/L@q`Vf02G,0@AO0j!Ip7JbAMh_KVYa6t@!-Jkf^,'RYO%.W_J0@Qh1LY/1SSSk!6g5lo*k.\jf>%i1ekY6knQK:s'MiKuti[)&DC^\BTm?*HRE,q&acG*tnPQp,V`9TQ'M46%5f>NSbi9-YAa%0Nc9;YJd(h6V=d]":\)8BY`Z[2\DLn$%2naZh6TG`U/Ng7M^YC4$jHIQQ8Q>E`mbe/r($G"pUOUSm.MZGl%^/ATbFU7"R$l\)#bu%KKT6FRol9"6m<C@\>=ue,q0^AQ;-RN0K'Ma0qBT91?$>eR?f'j&J[3sOVD2>YpO]3W74iP=o62c"Jpt)]!f8kCXqI>Y$=)bQ.tM\%gD=n@8l*g#$bN,f]2?Q'E#k"s[Ya42F<6Jt1q)%oO1Q_MQ,[F)i0GAf_f\*@`J,P["TtGQ,8?mDC9&Y(:I2*10T>^gU94O5aE=j1%fe"NR(R`g50GntD@9K<;@V-</ZQn5LL>YP20hW(]mDo@lQ7`V#aSu+,#@m%a@rfXY[F\D"1RT7=al_b$*]'3)1+BZGeK$H6*AX>a%H*t[d@?X&*_NS&Ib[bn<,hjnPGg']AaJ?QTHPORpAqs&$s/M-J_Y,-U.lq8t4(KPA^X?U=ZU6(c+1,*`eg_=-onVm6R^Gb12#[UN%Wj$6?U3pd;A#=+(*tOM!jaN[^5k=^KnDmcA9[W%l0Ng&"+.`C&j0pl9n6Yr5#QNaq3pYm]N)rOsiC=NQShrS2;V'"r]dKJ/eDpAP%Uss*Q3eMlko\5kQ7h;LF[tc8Jc:c@3U$T3H!75\--k3A3G\U4`#jWPWRtq"cre?Ia%i7kd3<?^OV:+$r7O2>#5nMsIQK(mM!ZDcn%3kY%D2ZS:05JOjYN(XK1XS6WdcZr="cS(ftNNHQ515T,!:O3[@/=R4ahOa:'i.P39i!&S+kF/!R+gPJmS2ZI@Dg2Hk^li&aSoiV'%9E3Arf9=&7\+4n#"-8HB(k;X5:O#Yu"LPTbjUD@+&,1.Pc'u,S?sCJTgCdT?<apc",ota/PI/Q5ack[n8O6#m%>dY/V9tCq!(f^1%PYT.066`0>;BE&rGV0_(5R2$IjajRrR#*-<K#j0ST'2'.@6fZkOt!7j@>h,WDS?031A"L@2A8_r'@:J<'2.j8/f=7YMMidj,jcU<%8H<)1I$0DE4:gP\7k*XXaiak:R2F6N,N0<X(nX,K[7A>\9]WJnJHDI(V,Nli"\"e6"B9`49ZG!b5XPlFXTY8NLI+\U,]Q#t7k(C*%:=GegCc]S4H'*34())LAm9(p6%7V%1J-fnG:ShNgA/[t?4\M\^Jgf!V&`JM4!S3'&\TBTd-.QXYfM"1t925MakO+21iF,jpcN1&P%"M9Lm.[;.?eXjT""dn._(5BdU#U2h"l:`W;=rnM6$n0;`!<cph.AdjQJ_V!>,X4o@;B-7Xek1hFK@Z7a!%OtpaH%0gj^r+[<V3rI%Mj/jD+sP2#$iQ.Q!8QoNJ='@Qm!fWD`h$C[8)u*_*-S(\aHG@s'3pJlU^3&eL*qm^I0@_TJNPCiX!'o_'OfX#L/l;j>/2Z:1#NVS%;R##@@[:_!I3<`ge^S5^@ifWk23at2TBT+"K(W*9PYs!`8jgUlr?9VeYJT5t0Qj8!0i6/WiU[%#QR.!<q@"-86:B+iNH#7A80T!G%AIr0bLQ\:FE78ORX>3AU'^X1O2U+.U5*<IpHKm;J%JUXq=`"I)#+&)]RJrEu/WU7'<_.pKD9+]J5=D4FF]eR6V,Dlj_Wjb884f_Y%TVF]'SKYhG]`J`8=-bDD1h\MG0ei0\r1jMh5[G&D1oR6YnYHl0QII:&J$^8F#1JY8J]k+%KQp(H9R$%0XJN_.Q;PHKRP><?cOf>j%*>8C-Bf)6;nN9r#R@(dH<5qt2V.2hAc$KV=.40`oiV5tsN<TJR1m]<"Gi<E^S^eHIK':.LfnS!(Ed(V]I0TWs5l>%oJi0(C-CF5^%#?X]S8M-aTXYs]0h&dihs#M_1%oXp7dA_5FW-q!19FqA'I7?1[5RpRL`#)KI&Q+u0-pN7pB2^Nk6n(_Y"Ze#)-I\(I5jf(s.?>)r%4p+>eRK4]rOVQNoj<lMi"-Qh["^>ic34M1@V#P:&r1Bf_&S5ZakTG->Ya&a^s*m&\Z<Pq#"M[5%^l=YoR.k)0^f_8*!Ts]DKMW(&%EZc7An#*14*^*R]"Auf4@IC'lT6[!!m[BS.=/:P(\P)O%aq5W+'YZLK/r+acjG/<a%F8H=GAEBqGhLKQZ]NS(4uKPE&siLPC+"Ub%+lA[$#/[:hLmHR0okNZ9DRXW5\$h%kB+G0.`\t[^S(#XQ08#B>7n!4[!ZlcN9)P`.G=DoY#\I>J:=NAl:,L^k-8PJYEsol8\:f!-%/[]Oh"Zt>WC]iX;F&^n/c"=A*4hhq]ko3mJDtR(8F_m8s$PkD*OAh?-.S"$8^S^@DHfC)>Dh&>2hFQ;SF>4K)@(-E]df&##6@-F]%YS;_7LDB$p)L3Ed:AeN8r2#Yo//4NDOL5L]qut,lE%9uZn#/mN>u4<&09LE^HZ;oC#8Y09O9GH3Kn)FSlD_2#IL1Ing]rKeQ,"j8%K<o?6>.,!f.k.qX4l5-3&kb@jH$#Nci@8[Q+Ygs+:QaN(9Vnh"69*hT,V-O#keLqS^XDN&EX_3Zm/s!=4>mnQ[uO[G*JY;5VO)a&%q<4u:)Qon6i\:8f%k4-[2V$>Fb5XZ?rB5kl-+qaU%Z)+m^,@P,&qp@ri:7YD-X\4bAM`H2e]Iq_=%8p-q,26l>GC7K'O9>`1]Sat%:WNrh2"Th9DQWF.iKs#DCuG3(odSjldBW@XAS]>r(TPlb*Od(IjrMYM@Wh!R2'qMCdR$EI<k-.r8N<@]iS'F^kA:#7L_[(ZeJe4!%k^%8.QN#d_)SQ^%?$\..erjg(RZ5;ODUL*$FoZoaUplQK5cgEfXenk,)d:>HcDoQV.()L=An*uFXPWY0&>NiUUG_Jid.QaCI4+Mb%<q00LmhUL&h6JLh-tjspfnsgc&N6@(6dl6K<UO]]p$:G^6:QH*jUTr.2,p>kLW%=@X/\t6lJ1-/NI8-U4hk4Y(;-2\HlW^01h)Ej%pDa\I*&GJ5TG[p'`t+^#p.7RMD>!@/155,Ob!JR)<rU+^_BGZnq4"RkMiKq]Rt-d=\'Z2fDWlC]\%Y7T'2/*]gigfZ4DjX+BJo<V%YfC3,RWuU\eWc"d4V=`ODl]RUmtN/CH8D"7@$t1-7M?;7X&<b@$<T`EfrQp3B!,cilW](PY_''qBt'8L>@Wt:>Et`?S?3`mS9Ndk%!@(iFA;fO'B$0#3R0AP`X@Af;,m.Bj3A7sr[i5'1X@Bq+k*U?Sf/(&34i:K+_:RYQ92mO27?d:MKCQHd,kI0PSa)#nmKR,Ho5-A(%nCc+`pZTd-k(WYF1jXH+R9,L#fg)WF^9,tZB1(9,]CiSL>?J`)>rXt@gQLI+=cdC(d']r7?@%H3+WO.NG"uJZ3iRc8ef2f`6$"Z]%8OZ(XU_pdQ35DDgc_aV%=cfDMZ<"&8f^^S\Is+ulPqssG.ZQric+G4ZV#Z6#T*,-E3,AkdJ-E>2aih#H,-=<T9;u'dm?cUs5$P^b%gAAg8&#Wu`fYI&o@d1/H\^fEq=[Y7t7r)LlQ)DRsGe_1[>e2USNCm,W:"Ljb]PQu0q^.AU9t!+*Ye-e;c[(0YWg6r6.>h6AJ7'_?%4T%dTL.=_$?l65Ki=]m)]?m;)<K[II"cHMb$LS[8;_0Y:")InqV0jfaA]W+hb;@\A'JENQT(ah1kbC$#%1TM,H;G"X+BL4h+:-q3%Y[6DV"5gZYJgH`-b-_LT2().L1LE[nh;QK[Y,$6GaE0.(N*]g94N'>#0[uJi(5_2g`t_>BUI`)7qhPF49gpWeG>TulckXa['SCtD%#NFcQ;Co@2G&T:NbTn$gJRSpY<>;LFbQ2E*<2W_h:<i!$3CJEB[2*5!6N!`h8V\=PPh1r6>1X]8ffGnhM4]sdbNU;B].QEA4::NX%ma0!k:DK3'LgNGpB^12b.Wu2@&hBDU$=YB3iOrX0LgPgm_f^c]:ZRu>*o%$rlN1Mo1=sMWfsF'M4sO[12bVpW^l$T2HdoqK94GoK%'rbog?D-)boEr'H?$^'6CZ*F2__/_o'.ddo(qcP(Xa.bFmt+ui8e-G]lNP,/T"Ij`C7-XC-[P2N`i5,$>9a=_Fu#AB7^N\uF^$X2%7"(+./gXgUW?E!nY>;dQ^`dl?Zg&EX(rT^DnV&]FDHC@1kni-H9O>HV8PL@]Q/XX,[+t=OKN<b/8K4?o8;\"kTMV0`<l?R$?SP,5%ZIF0,,$<@6+I5o^JmgB[:^e46S&=bSe+;K?;V-(F*36>HQrpNN5M5+;DY`&pSOMp)+h'k;oc9algIN:lK*,mQ;GoS*7oHtU]&#5l%M'A30hI^(eZ%aNa&TYWWcib]3Ql*\-/R!YPS'DLKPM:bWRF0.$FC\L6%"(b'?ItUAfK@4dlTq7CA>npD7?s!#f9t<dnONgW_?hs,%99I)/pk[,!0FT][W/U%G:4e<]-,F%k2rMua9Rjj2PS3"CHS#VD9ui2UX6rZt2i]W!$:6W.f];A0LqQnp;R7!XS[%W_]Vm&\&sG_^%($eWSGN=3F;U30"TMEhH'>'.Sfa"p;PBnQI?ueD#%*-Ln!8kIpCEksZYD[/?RY;$TWYOb('s`"ZNNL2+;hCG]meEqr*q1Gki1&@S%6*SKbpP:!6^eFqF^7^kCC9g+BFfuW<4Gc;,TEr^bi714L7`FMt%^<ksUKA&'#pu8dh$ZT'^BH1iEF#dE^V?FO?^?SUQ%N-uY.75P%o."5$]ZMrBjE0l@@(Ejnn1(taPo>1tX+8`robWNf!GauHbMlO;1_jk2KimYG3*6oh<r9_5J73f4K2hp[7?[@V<K:4ee:Uck^,Tlp%`aVr``(qqb!`iROQ;nNK;d*5`A=*V$Ep+r&0j:@[(oEf5;WVNX`TC-M7KVA8b16;"k2oVo"3K@s._JGHe!<nBVRMDJ;XpT1Io7aD%,<?YVo39[YQGoeQNRto_'sJaD-nIgk)MN<)#G]-X_Yc!\![b<+Q;Jf\,%$%V;0bAN_.HXf7tE.0D_ikN+A2T?<9Pn*JPAVQS=CnZ%Ce!M(T&^jJ9rX5P,q)kfjnX\-ND6B71L*-]'t4SuE)8%@7d-"Q:?>&?Hoj;&[[);4@lY:T67Nm)V[CL[)K7X5_YX%LE[ihqU:bVg%.LLTVN\+"[SQ[<oD+YN[Jt$=Ni!-@6P>Q>%HOg@VMQBSh%_*Ak$%j1?P>U;0,i(YR;+9i>Uq(%k.Kfia\TTYV$8l-gjC2)NBAMJV%7YRL4]E[N;W'Do>"M@I-^amE5E"a_26E5'4=G.$W,'INPMbkSPKW^/W&Lr7$4ZM1?<$2onb\T#66p=of6A7s16dH"2!r'c-1W^h?%N*^i,fRsUm_e\OAHjW\c[2s]&6*<W#o8?DdM*'7?:W\r1ipK#qJQb6+k#*M@D*A-cJfJe$.=OsiB9L63Getn%Wu%DfEMdN;>^VE9%7d?smo;Tra3OmQ!;]n%B..uLs\S:!+Hn'(&YkSohOO#;H.Sf(3bGP[RY"iKs.I??`7XKb`OYEb1/NO'L'YJ=97An5#Z9.:b%k;-e%XN@C07k.,#(S:c[ZL\<n_LEc*SpUk^&og&/'Fuknec$alAJ<Q^W$I:\7jk"iH,eI":_dSWh5-$+nViYWLi,OZMPbAdW;'9l4roT>%_]21N`Me:jh^6NE7Kk@:RL_jk$r/r'e[PKfKi;h\63&nd\%U?J-;UUDO`1,fPB+Ru3N4\,)^+MOgZgHEQ@JI\@\2?,9E$]*J'"=;%nR)<5R$[UXQ?blSV")LOOr3q"[;4N36cNr.#oU&QD6m6%Z->1;bf8bRZ'pJ'RWjb2C-gTjh=#0d%2lK$W#N&H4_M8$-\%HFV1."Z%lbCp?%?3LgR%E'bf-A]ATCg10If/tbq+7V/IX(VdrD*qG*rl*$iKo$XIX:bIo>?&!miFZAr:ROSh]DfWs1/$rl1$Q5ID#ITO'ho[%"HQ7Jp[<V0bFd\j&*9J;#6~>%AI9_PrivateDataEnd